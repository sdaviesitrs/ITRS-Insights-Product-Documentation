<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="14" MadCap:lastHeight="12395.67" MadCap:lastWidth="2605">
    <head>
        <link href="../Resources/TableStyles/Standard.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1>ITRS&#160;Insights Data Streams &amp;&#160;Schema User Guide</h1>
        <h2 class="nokeyline">Introduction</h2>
        <p>
            <MadCap:concept term="Streams" />
        </p>
        <p>Data <strong class="green">streams </strong>are the lifeblood of <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> - they channel the data you want to analyse into <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />' mathematical brain, <MadCap:variable name="General.ProductNameValo" />.</p>
        <MadCap:snippetBlock src="../Resources/Snippets/Definition Stream.flsnp" />
        <p>All that you need to do before you can start running queries and searches is tell <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> what the data is and how it's structured. This is done through a simple <strong class="green">schema</strong>.</p>
        <MadCap:snippetBlock src="../Resources/Snippets/Definition Schema.flsnp" />
        <p>Each stream has a <strong class="green">schema </strong>that defines what information is expected, and in what format.  Multiple streams can be organized into <strong class="green">Collections</strong><MadCap:conditionalText MadCap:conditions="Output.Digital"> (see: <MadCap:xref href="../A_Quick Start/Organising Data.htm#Collections">Collection</MadCap:xref>)</MadCap:conditionalText>.</p>
        <p>As with everything in&#160;<MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />, we've designed the process of bringing data in to be as simple as possible, regardless of whether it's streaming or historical. To this end, there are really only a handful of inputs are required from you:</p>
        <ol>
            <li>Choose a <strong class="green">repository </strong>type</li>
            <li>Prepare your data and create a <strong class="green">schema</strong></li>
            <li>Import the data <strong class="green">stream </strong>to <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /></li>
            <li MadCap:conditions="Versions.Insights v1_6">
                <MadCap:conditionalText MadCap:conditions="Output.Staging Only" style="background-color: #ff1493;">IKABO-954 </MadCap:conditionalText>(Optional)&#160;Define a <strong class="green">retention policy</strong> for your data stream(s)</li>
        </ol>
        <p>Once you've completed these steps, you can either bring in additional streams or just get to work analysing.</p>
        <MadCap:pageBreak />
        <p>This user guide will talk you through all three steps. </p>
        <MadCap:dropDown>
            <MadCap:dropDownHead class="H2">
                <MadCap:dropDownHotspot><a name="ChooseRepo"></a>Choose a&#160;Repository</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:snippetBlock src="../Resources/Snippets/Definition SSR.flsnp" />
                <MadCap:snippetBlock src="../Resources/Snippets/Definition TSR.flsnp" />
                <MadCap:snippetBlock src="../Resources/Snippets/About Repository Types.flsnp" />
                <p>Which is best for you is a decision largely driven by what you want to do with your data. Historical analysis?&#160;Textual analysis? </p>
                <p>Check out our tech reference here, <MadCap:xref href="../B_Technical Reference/Repositories/Repositories - TSR &amp; SSR.htm">Repositories - TSR &amp; SSR</MadCap:xref> to fully understand what the differences are, or skip the technical bit and go through our flowchart to help you decide.</p>
                <MadCap:pageBreak />
                <MadCap:snippetBlock src="../Resources/Snippets/How To Choose A Repository.flsnp" />
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:pageBreak />
        <MadCap:dropDown>
            <MadCap:dropDownHead class="H2NoKeyline">
                <MadCap:dropDownHotspot><a name="Schema"></a>Prepare your DATA&#160;&amp;&#160;Create a SCHEMA</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:snippetBlock src="../Resources/Snippets/Definition Schema.flsnp" />
                <MadCap:snippetBlock src="../Resources/Snippets/About Schema.flsnp" />
                <p>An <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)"></MadCap:variable> schema contains three elements:</p>
                <ol>
                    <li>A user defined schema <code>version</code></li>
                    <li>A <code>config </code>section</li>
                    <li>A <code>topDef </code>section that defines the data schema</li>
                </ol>
                <p>This is the basic <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> schema:</p>
                <blockquote><pre><code>{
 "version": "1.0.0",
 "config": {
  "key": []
 },
 "topDef": {}
}</code></pre>
                </blockquote>
                <MadCap:pageBreak />
                <h3>topDef</h3>
                <p>The topDef section can contain a simple or a complex type. </p>
                <p>A simple type is defined as:</p>
                <blockquote>
                    <p>"<code>topDef": { "type" : "double" }</code></p>
                </blockquote>
                <p>A complex type is defined as:</p>
                <blockquote><pre>"topDef": {
  "type" : "record",
  "properties" : {
    "host" : { "type" : "string" }
  }
}</pre>
                </blockquote>
                <MadCap:snippetBlock src="../Resources/Snippets/Example Schema.flsnp" />
                <MadCap:pageBreak />
                <p class="note">Note: Valid field identifiers must:<br />1. Start with a character<br />2. Not contain spaces<br />3. Only contain alpha numeric characters and underscores</p>
                <h3>Supported Schema Types &amp;&#160;Examples</h3>
                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../Resources/TableStyles/Standard.css');" class="TableStyle-Standard" cellspacing="0">
                    <col class="TableStyle-Standard-Column-Column1" />
                    <col class="TableStyle-Standard-Column-Column2" />
                    <col class="TableStyle-Standard-Column-Column3" />
                    <tbody>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <th class="TableStyle-Standard-BodyE-Column1-Row1">Type</th>
                            <th class="TableStyle-Standard-BodyE-Column2-Row1">Description </th>
                            <th class="TableStyle-Standard-BodyD-Column3-Row1">Example</th>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">byte</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">8 bit integer</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">200</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">short</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">16 bit integer</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">1003</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">int</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">32 bit integer</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">100345</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">long</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">64 bit integer</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">100345000</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">double</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">Double precision float</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">23.5</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">date</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A date field in ISO8601 Format	</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">2015-01-24
</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">time</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A time field in ISO8601 Format	</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">13:04:16
</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">datetime</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A datetime field in ISO8601 Format	</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">2015-01-24T13:04:16
</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">duration</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A duration field</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">12 seconds</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">string</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A string field</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">This is a log message</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">boolean</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A Boolean field</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">
                                <p>true</p>
                                <p>&#160;</p>
                                <p>&#160;</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">geoCircle</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A geographic circle field</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">S33d 51m 23s E151d 12m 53s 0.0001
</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">geoPoint</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A geographic point field</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">S33d 51m 23.943s E151d 12m 53.8812s
</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">geoRectangle</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A geographic rectangle field</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">S33d 51m 24s E151d 12m 53s S33d 51m 23s E151d 12m 53.5s
</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">ip</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">An IP4/IP6 field	</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">192.10.0.120
</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">uuid	</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A uuid field</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">4957aac1-c11d-44bf-9d79-ca23dd213cf6
</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">contributor</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A Contributor ID represented as a string&#160;(a Contributor takes the form: <code>&lt;server&gt;/contributors/&lt;tenant&gt;/&lt;contributorType&gt;/&lt;contributorId&gt;</code>)</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">c4d29de9-d7a3-4040-91d2-e3683cbac05a
</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">email</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">An email address field</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">john.doe@domain.com
</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">uri</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A URI</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">www.google.com</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">tags</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A tags field</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">&#160;</td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyE-Column1-Row1">record</td>
                            <td class="TableStyle-Standard-BodyE-Column2-Row1">A record / object field (a record represents a complex type. Anything that has a document-like structure (think JSON) can be represented as a record.)</td>
                            <td class="TableStyle-Standard-BodyD-Column3-Row1">
                                <p>&#160;</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-Standard-Body-Row1">
                            <td class="TableStyle-Standard-BodyB-Column1-Row1">array</td>
                            <td class="TableStyle-Standard-BodyB-Column2-Row1">An array field</td>
                            <td class="TableStyle-Standard-BodyA-Column3-Row1">&#160;</td>
                        </tr>
                    </tbody>
                </table>
                <MadCap:pageBreak />
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Example Schema</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <blockquote><pre>{
  "type" : "record"
  "properties" : {
    "contributor"   : { "type" : "contributor", "definition": "probes" },
    "timestamp"     : { "type" : "datetime" },
    "host"          : {
       "type" : "record",
       "properties" : {
         "name"     : { "type" : "string" },
         "ip"       : { "type" : "ip" },
       }
    },
    "os"            : {
       "type" : "record",
       "properties" : {
         "name"     : { "type" : "string" },
         "version"  : { "type" : "string" }
       }
    }
  }
}</pre>
                            <MadCap:pageBreak />
                        </blockquote>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Example Data </MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <blockquote><pre>{
  "contributor"   : "df625733-6fd8-465b-ac60-76fd23a52b4a",
  "timestamp"     : "2015-03-12 14:30:07",
  "host"          : {
    "name" : "ABC123",
    "ip"   : "192.10.0.120",
    "mac"  : "00-B0-D0-86-BB-F7"
  },
  "os" : {
    "name"     : "Windows",
    "version"  : "Vista"
  }
}</pre>
                        </blockquote>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Typed Array</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <blockquote><pre xml:space="preserve">{
  "type" : "sequence",
  "underlying" : {
    "type" : "..."
  }
}</pre>
                        </blockquote>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p>Example Schema</p>
                <blockquote><pre>{
  "type" : "sequence",
  "underlying" : {
    "type" : "double"
  }
}</pre>
                </blockquote>
                <p>Data</p>
                <blockquote>
                    <p><code>[30.4, 30.8, 20.0]</code>
                    </p>
                </blockquote>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:pageBreak />
        <MadCap:dropDown>
            <MadCap:dropDownHead class="H2NoKeyline">
                <MadCap:dropDownHotspot><a name="Import"></a>Import Data Stream</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>To import a data stream, you have to create your schema, add it to the <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> Stream&#160;Editor, then select the repository type for the data to be stored in (None is selected by default, and this is used for streaming data).</p>
                <blockquote>
                    <MadCap:snippetBlock src="../Resources/Snippets/How To Create Schema.flsnp" />
                </blockquote>
                <p MadCap:conditions="Output.Null">https://resources.itrsgroup.com/Insights/importing_data.html?highlight=ssr</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:pageBreak />
        <MadCap:dropDown MadCap:conditions="Versions.Insights v1_6">
            <MadCap:dropDownHead class="H2NoKeyline">
                <MadCap:dropDownHotspot><a name="RetentionPolicy"></a>Define a Retention Policy</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p MadCap:conditions="Output.Staging Only">IKABO-954</p>
                <p>In instances where you want to prevent a repository from growing infinitely large on a <MadCap:variable name="General.ProductNameValo" /> cluster, you can specify a data stream retention policy in order to constrain the size of the repository. You set data management rules based on duration. </p>
                <p class="note">Note: your data stream must have date and time fields in its schema in order for you to issue a management rule</p>
                <MadCap:snippetBlock src="../Resources/Snippets/How to Create Retention Policy.flsnp" />
                <p MadCap:conditions="Output.Null">Number of Records</p>
                <p MadCap:conditions="Output.Null">You can constrain a stream to a particular size, or delete it entirely, by specifying record-driven management rules. </p>
                <p MadCap:conditions="Output.Null">Constrain: if you set the number of rows for a stream at 100, <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> will delete the oldest rows once the 100 rows is exceeded, ensuring that the stream never reaches 101 rows or beyond.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>&#160;</p>
    </body>
</html>
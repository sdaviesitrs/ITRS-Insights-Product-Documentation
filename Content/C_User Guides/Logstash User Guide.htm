<?xml version="1.0" encoding="utf-8"?>
<html MadCap:lastBlockDepth="10" MadCap:lastHeight="3173" MadCap:lastWidth="997" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Logstash walkthough</title>
        <style type="text/css">
/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7614 2013-02-21 15:55:51Z milde $
:Copyright: This stylesheet has been placed in the public domain.
Default cascading style sheet for the HTML output of Docutils.
See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/
/* used to remove borders from tables and images */
.borderless,
table.borderless td,
table.borderless th
{
	border: 0;
}
table.borderless td,
table.borderless th
{
	/* Override padding for "table.docutils td" with "! important".
 The right padding separates the table cells. */
	padding: 0 0.5em 0 0 !important;
}
.first
{
	/* Override more specific margin styles with "! important". */
	margin-top: 0 !important;
}
.last,
.with-subtitle
{
	margin-bottom: 0 !important;
}
.hidden
{
	display: none;
}
a.toc-backref
{
	text-decoration: none;
	color: black;
}
blockquote.epigraph
{
	margin: 2em 5em;
}
dl.docutils dd
{
	margin-bottom: 0.5em;
}
object[type="image/svg+xml"],
object[type="application/x-shockwave-flash"]
{
	overflow: hidden;
}
/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
 font-weight: bold }
*/
div.abstract
{
	margin: 2em 5em;
}
div.abstract p.topic-title
{
	font-weight: bold;
	text-align: center;
}
div.admonition,
div.attention,
div.caution,
div.danger,
div.error,
div.hint,
div.important,
div.note,
div.tip,
div.warning
{
	margin: 2em;
	border: medium outset;
	padding: 1em;
}
div.admonition p.admonition-title,
div.hint p.admonition-title,
div.important p.admonition-title,
div.note p.admonition-title,
div.tip p.admonition-title
{
	font-weight: bold;
	font-family: sans-serif;
}
div.attention p.admonition-title,
div.caution p.admonition-title,
div.danger p.admonition-title,
div.error p.admonition-title,
div.warning p.admonition-title,
.code .error
{
	color: red;
	font-weight: bold;
	font-family: sans-serif;
}
/* Uncomment (and remove this text!) to get reduced vertical space in
 compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
 margin-bottom: 0.5em }
div.compound .compound-last, div.compound .compound-middle {
 margin-top: 0.5em }
*/
div.dedication
{
	margin: 2em 5em;
	text-align: center;
	font-style: italic;
}
div.dedication p.topic-title
{
	font-weight: bold;
	font-style: normal;
}
div.figure
{
	margin-left: 2em;
	margin-right: 2em;
}
div.footer,
div.header
{
	clear: both;
	font-size: smaller;
}
div.line-block
{
	display: block;
	margin-top: 1em;
	margin-bottom: 1em;
}
div.line-block div.line-block
{
	margin-top: 0;
	margin-bottom: 0;
	margin-left: 1.5em;
}
div.sidebar
{
	margin: 0 0 0.5em 1em;
	border: medium outset;
	padding: 1em;
	background-color: #ffffee;
	width: 40%;
	float: right;
	clear: right;
}
div.sidebar p.rubric
{
	font-family: sans-serif;
	font-size: medium;
}
div.system-messages
{
	margin: 5em;
}
div.system-messages h1
{
	color: red;
}
div.system-message
{
	border: medium outset;
	padding: 1em;
}
div.system-message p.system-message-title
{
	color: red;
	font-weight: bold;
}
div.topic
{
	margin: 2em;
}
h1.section-subtitle,
h2.section-subtitle,
h3.section-subtitle,
h4.section-subtitle,
h5.section-subtitle,
h6.section-subtitle
{
	margin-top: 0.4em;
}
h1.title
{
	text-align: center;
}
h2.subtitle
{
	text-align: center;
}
hr.docutils
{
	width: 75%;
}
img.align-left,
.figure.align-left,
object.align-left
{
	clear: left;
	float: left;
	margin-right: 1em;
}
img.align-right,
.figure.align-right,
object.align-right
{
	clear: right;
	float: right;
	margin-left: 1em;
}
img.align-center,
.figure.align-center,
object.align-center
{
	display: block;
	margin-left: auto;
	margin-right: auto;
}
.align-left
{
	text-align: left;
}
.align-center
{
	clear: both;
	text-align: center;
}
.align-right
{
	text-align: right;
}
/* reset inner alignment in figures */
div.align-right
{
	text-align: inherit;
}
/* div.align-center * { */
/* text-align: left } */
ol.simple,
ul.simple
{
	margin-bottom: 1em;
}
ol.arabic
{
	list-style: decimal;
}
ol.loweralpha
{
	list-style: lower-alpha;
}
ol.upperalpha
{
	list-style: upper-alpha;
}
ol.lowerroman
{
	list-style: lower-roman;
}
ol.upperroman
{
	list-style: upper-roman;
}
p.attribution
{
	text-align: right;
	margin-left: 50%;
}
p.caption
{
	font-style: italic;
}
p.credits
{
	font-style: italic;
	font-size: smaller;
}
p.label
{
	white-space: nowrap;
}
p.rubric
{
	font-weight: bold;
	font-size: larger;
	color: maroon;
	text-align: center;
}
p.sidebar-title
{
	font-family: sans-serif;
	font-weight: bold;
	font-size: larger;
}
p.sidebar-subtitle
{
	font-family: sans-serif;
	font-weight: bold;
}
p.topic-title
{
	font-weight: bold;
}
pre.address
{
	margin-bottom: 0;
	margin-top: 0;
	font: inherit;
}
pre.literal-block,
pre.doctest-block,
pre.math,
pre.code
{
	margin-left: 2em;
	margin-right: 2em;
}
pre.code .ln
{
	color: grey;
}
/* line numbers */
pre.code,
code
{
	background-color: #eeeeee;
}
pre.code .comment,
code .comment
{
	color: #5C6576;
}
pre.code .keyword,
code .keyword
{
	color: #3B0D06;
	font-weight: bold;
}
pre.code .literal.string,
code .literal.string
{
	color: #0C5404;
}
pre.code .name.builtin,
code .name.builtin
{
	color: #352B84;
}
pre.code .deleted,
code .deleted
{
	background-color: #DEB0A1;
}
pre.code .inserted,
code .inserted
{
	background-color: #A3D289;
}
span.classifier
{
	font-family: sans-serif;
	font-style: oblique;
}
span.classifier-delimiter
{
	font-family: sans-serif;
	font-weight: bold;
}
span.interpreted
{
	font-family: sans-serif;
}
span.option
{
	white-space: nowrap;
}
span.pre
{
	white-space: pre;
}
span.problematic
{
	color: red;
}
span.section-subtitle
{
	/* font-size relative to parent (h1..h6 element) */
	font-size: 80%;
}
table.citation
{
	border-left: solid 1px gray;
	margin-left: 1px;
}
table.docinfo
{
	margin: 2em 4em;
}
table.docutils
{
	margin-top: 0.5em;
	margin-bottom: 0.5em;
}
table.footnote
{
	border-left: solid 1px black;
	margin-left: 1px;
}
table.docutils td,
table.docutils th,
table.docinfo td,
table.docinfo th
{
	padding-left: 0.5em;
	padding-right: 0.5em;
	vertical-align: top;
}
table.docutils th.field-name,
table.docinfo th.docinfo-name
{
	font-weight: bold;
	text-align: left;
	white-space: nowrap;
	padding-left: 0;
}
/* "booktabs" style (no vertical lines) */
table.docutils.booktabs
{
	border: 0px;
	border-top: 2px solid;
	border-bottom: 2px solid;
	border-collapse: collapse;
}
table.docutils.booktabs *
{
	border: 0px;
}
table.docutils.booktabs th
{
	border-bottom: thin solid;
	text-align: left;
}
h1 tt.docutils,
h2 tt.docutils,
h3 tt.docutils,
h4 tt.docutils,
h5 tt.docutils,
h6 tt.docutils
{
	font-size: 100%;
}
ul.auto-toc
{
	list-style-type: none;
}

</style>
    </head>
    <body>
        <div class="document" id="logstash-walkthough">
            <h1>Logstash walkthough</h1>
            <div class="section" id="background">
                <h2>Background</h2>
                <p>In this example we will use Logstash to parse an Apache HTTP Server log file and feed it into Valo for analysis.</p>
            </div>
            <div class="section" id="walkthrough">
                <h2>Walkthrough</h2>
                <ol class="arabic">
                    <li>
                        <p class="first">Download and unpack Logstash.</p>
                        <blockquote>
                            <p>Download the latest version of <a class="reference external" href="https://www.elastic.co/products/logstash">Logstash</a>, and unzip it. We will refer to the folder you unzip it to as your "Logstash folder".</p>
                            <p>If you are not familiar with Logstash you may want to work through the <a class="reference external" href="https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html">Logstash tutorial</a> before continuing with this walkthrough.</p>
                        </blockquote>
                    </li>
                </ol>
                <p>Next you need to create the stream and schema:</p>
                <p>You can create and edit schema from the Insights home page by selecting
<strong>+ Add new stream</strong></p>
                <p>
                    <img alt="insights-via-logstash-image0" src="../Resources/Images/HomePage_StreamEdit.png" />
                </p>
                <p>This will bring you to the schema editor.</p>
                <p>
                    <img alt="insights-via-logstash-image1" src="../Resources/Images/StreamEditor-01.png" />
                </p>
                <p>If you have not already you need to add a <strong>Stream Name</strong> (such as
"/demo/infrastructure/apache") and select from the radio buttons at the
bottom which repository you want to store the data in, the ssr is recommended.</p>
                <div class="section" id="now-you-actually-need-to-create-the-schema">
                    <h2>Now you actually need to create the schema.....</h2>
                    <p MadCap:conditions="Output.Null">-- may look like this.</p>
                    <div class="system-message"><pre class="literal-block" xml:space="preserve">
{
"schema": {
    "version": "1.0.0",
    "config": {},
    "topDef": {
        "type": "record",
        "properties": {
            "utctimestamp": { "type": "datetime" },
            "version": { "type": "int" },
            "host": { "type": "string" },
            "path": { "type": "string" },
            "message": { "type": "string" },
            "clientip": { "type": "string" },
            "ident": { "type": "string" },
            "auth": { "type": "string" },
            "timestamp": { "type": "string" },
            "verb": { "type": "string", "optional": "true" },
            "request": { "type": "string", "optional": "true" },
            "httpversion": { "type": "double", "optional": "true" },
            "rawrequest": { "type": "string", "optional": "true" },
            "response": { "type": "int" },
            "bytes": { "type": "int", "optional": "true" }
        }
    }
}
<p>}</p></pre>
                    </div>
                    <p>Logstash will POST data to a Valo stream in the same way as any other
REST client. Before it can do that, we need to configure the stream.</p>
                    <p>In this example Logstash will feed Valo with Apache log data, so we'll
call the stream "/streams/demo/infrastructure/apache".</p>
                    <p>The schema fields required depend on the content of the Logstash
configuration file (as discussed in the next section).</p>
                    <p>Using your HTTP tool of choice (e.g. the Postman Chrome App
<a class="reference external" href="http://www.getpostman.com">http://www.getpostman.com</a>) create the stream with the following command:</p>
                    <p>Run Logstash.</p>
                    <ol class="arabic">
                        <li>
                            <p class="first">Prepare the sample data</p>
                            <blockquote>
                                <p>Download the following two files into a new folder, we will refer to this folder as your "sample data" folder:</p>
                                <ol class="arabic simple">
                                    <li>The sample Logstash configuration file this can be found in you local valo documentation <em>&lt;valo&gt; /doc/_downloads/logstash-valo-sample.conf</em>.</li>
                                    <li>The sample Apache HTTP Server log file <em>&lt;valo&gt; /doc/_downloads/sample-apache-log.zip</em>. This file was provided by <a class="reference external" href="http://ita.ee.lbl.gov/html/contrib/NASA-HTTP.html">NASA</a> (we're using the first 100,000 lines of "NASA_access_log_Jul95").</li>
                                </ol>
                                <p>Unzip "sample-apache-log.zip" so that your "sample data" folder contains "sample-apache-log".</p>
                                <p>You can delete "sample-apache-log.zip" as it is no longer needed.</p>
                            </blockquote>
                        </li>
                        <li>
                            <p class="first">Run Logstash.</p>
                            <blockquote>
                                <p>If you open "logstash-valo-sample.conf", you will see that it specifies:</p>
                                <ol class="arabic simple">
                                    <li>What log files to read - in this case a log file produced by an Apache HTTP Server.</li>
                                    <li>How to parse the log files - in this case we are using the COMMONAPACHELOG format as described <a class="reference external" href="https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns">here</a>.</li>
                                    <li>How to send the log data to Valo.</li>
                                </ol>
                                <p>To launch Logstash and have it feed data into Valo:</p>
                                <ol class="arabic simple">
                                    <li>Open "logstash-valo-sample.conf" and replace "&lt;path_to_log_file&gt;" with the fully qualified path to your "sample data" folder.</li>
                                    <li>Open a terminal window / command prompt.</li>
                                    <li>Navigate to your "sample data" folder in your Valo working copy.</li>
                                    <li>Execute the following command:</li>
                                </ol>
                                <div class="system-message"><pre class="literal-block" xml:space="preserve">
.. code-block:: bash
    &lt;logstash folder&gt;/bin/logstash --config logstash-valo-sample.conf
</pre>
                                </div>
                            </blockquote>
                        </li>
                        <li>
                            <p class="first">Run some queries.</p>
                            <blockquote>
                                <p>It will take a little while for Logstash to push all of the log data into Valo, but you can start running queries immediately.</p>
                                <p>As an example you can run the following to see how many log entries have been imported into Valo:</p>
                                <div class="system-message"><pre class="literal-block" xml:space="preserve">
    from historical /streams/demo/infrastructure/apache
    select count() as requests, min(utctimestamp) as first, max(utctimestamp) as last
</pre>
                                </div>
                                <p>You can also run the following to see how many responses for each HTTP response code there are:</p>
                                <div class="system-message"><pre class="literal-block" xml:space="preserve">
    from historical /streams/demo/infrastructure/apache
    group by response
    select response, count() as responseCount
</pre>
                                </div>
                            </blockquote>
                        </li>
                    </ol>
                </div>
            </div>
            <div class="section" id="resetting-logstash-state">
                <h2>Resetting Logstash state</h2>
                <p>Logstash uses "sincedb" to remember what data it has already processed.</p>
                <p>If you need to reset this state you can do this on Linux or OSX with the following command:</p>
                <div class="system-message"><pre class="literal-block" xml:space="preserve">
    rm ~/.sincedb_*
</pre>
                </div>
            </div>
        </div>
    </body>
</html>
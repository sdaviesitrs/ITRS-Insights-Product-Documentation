<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="15" MadCap:lastHeight="720" MadCap:lastWidth="577">
    <head>
        <link href="../Resources/Stylesheets/styles.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <body>
            <h1>Query, Search and Transform Introduction</h1>
            <p><MadCap:variable name="General.Product Name&#160;Insights (Full)" /> provides you with two powerful tools for analyzing and searching your data:</p>
            <MadCap:snippetBlock src="../Resources/Snippets/About Free Text Search.flsnp" />
            <MadCap:snippetBlock src="../Resources/Snippets/Definition Query.flsnp" />
            <p>This user guide talks you through how <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> uses <strong class="green">queries </strong>and <strong class="green">free text searches</strong>, how to create basic and sophisticated queries, and how to run free text searches.</p>
            <p>If you're an advanced user and you're tempted to skip the introduction, please read our section on <MadCap:xref href="#TransformationalPipeline">The Transformational Pipeline</MadCap:xref>, as this will likely be different from your previous SQL experience.</p>
            <p>Once you've run your query, you'll almost certainly want to visualize the results. For this, check out our <MadCap:conditionalText MadCap:conditions="Output.Digital"><MadCap:xref href="Visualizing Results User Guide.htm">[%=General.Product Name&#160;Insights (Full)%] Visualizing Results User Guide</MadCap:xref>.</MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="Output.Print"><MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> Visualizing Results User Guide.</MadCap:conditionalText></p>
            <MadCap:pageBreak />
            <MadCap:dropDown>
                <MadCap:dropDownHead class="H2NoKeyline">
                    <MadCap:dropDownHotspot>Introduction</MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody>
                    <h3>The difference between search and query</h3>
                    <MadCap:snippetBlock src="../Resources/Snippets/Definition Free Text Search.flsnp" MadCap:conditions="Output.Digital" />
                    <MadCap:snippetBlock src="../Resources/Snippets/Definition Query.flsnp" MadCap:conditions="Output.Digital" />
                    <p><MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />' <strong class="green">Free Text Search</strong>  looks through your data streams and searches for a specific string of text that you define in the search bar (characters, numbers etc.). It returns to you all
the instances where this bit of text occurs. Free text search does not attempt in anyway to
interpret or know the data - it is, in effect, simply a matching exercise. </p>
                    <p>A query seeks to in some way understand and work with
the data. For example, in its most basic form a query can look into
data to find instances of a number that is greater than 5. To do this
requires that the system understands what a number is (and what it is not)
and the comparative order of the numbers - this is why you can only run
queries on data that has a <strong class="green">schema </strong><MadCap:conditionalText MadCap:conditions="Output.Digital">(see: <strong class="green"><MadCap:xref href="../B_Technical Reference/Schema Fields &amp; Types/Schema Types.htm">Schema Types</MadCap:xref></strong>). </MadCap:conditionalText></p>
                    <p>This example of a query represents the most simplistic
of queries: through that manipulation and comparison of the data, you can
process and analyze your data stream in any number of ways. <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> provides
you not only with basic manipulation functions, but with easy and quick
access to complex and sophisticated algorithms for things such as
anomaly detection and univariate analysis.</p>
                    <h3>Repository Considerations</h3>
                    <p>If your streams are live, you can skip this section. If you're storing your data, then read on.</p>
                    <p>The type of search you can run is determined by the type of <strong class="green">repository </strong>your data is stored in. In short, you can only run free text searches on <strong class="green">semi-structured repositories</strong>. </p>
                    <MadCap:snippetBlock src="../Resources/Snippets/About TSR Simple.flsnp" />
                    <p>If you have yet to import a data stream into <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />, or if you need help figuring out which repository type is best for you, check out our <MadCap:xref href="Data Streams &amp; Schema User Guide.htm">[%=General.Product Name&#160;Insights (Full)%] Importing Data Streams &amp;&#160;Schema User Guide</MadCap:xref>. </p>
                    <p>For a technical overview of the different repositories, see <MadCap:xref href="../B_Technical Reference/Repositories/Repositories - TSR &amp; SSR.htm">Repositories - TSR &amp; SSR</MadCap:xref>.</p>
                    <h3>Notebooks</h3>
                    <p>Your searches and queries are saved in <strong class="green">Notebooks</strong>, and these in turn can be categorized by the  <strong class="green">collections</strong> they belong to. This means that you can use Collections for high-level organizational teams or functional requirements, then create subsets of Notepads for the different analytics that you want to run. </p>
                    <p>What's more, you can import and export your Notebooks, so you can share them with your colleagues or transfer them between <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> installations. </p>
                    <p>For more on <strong class="green">notebooks </strong>and <strong class="green">collections</strong>, head over to our <MadCap:xref href="Dashboard, Notebook &amp; Collection User Guide.htm">[%=General.Product Name&#160;Insights (Full)%] Dashboard &amp;&#160;Notebook&#160;User Guide</MadCap:xref>.</p>
                    <h3>Viewing the Results</h3>
                    <p>Once you've run your searches or queries, your results are displayed on a <strong class="green">dashboard</strong>. </p>
                    <p>If you haven't configured any charts, the results are tabulated numerically, but you can easily select one or more of our pre-built charts to visualize the results. See: <MadCap:xref href="Visualizing Results User Guide.htm">[%=General.Product Name&#160;Insights (Full)%] Visualizing Results User Guide</MadCap:xref>.</p>
                    <MadCap:pageBreak />
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <MadCap:dropDown>
                <MadCap:dropDownHead class="H2NoKeyline">
                    <MadCap:dropDownHotspot>Before you Start</MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody>
                    <p>Before you read further into this user guide, make sure you have:</p>
                    <ol>
                        <li><MadCap:variable name="General.ProductNameValo" /> running...</li>
                    </ol>
                    <blockquote>
                        <p>
                            <MadCap:snippetBlock src="../Resources/Snippets/How To Launch Valo.flsnp" />
                        </p>
                    </blockquote>
                    <ol start="3" MadCap:continue="true">
                        <li><MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> running...</li>
                    </ol>
                    <blockquote>
                        <p>
                            <MadCap:snippetBlock src="../Resources/Snippets/How To Launch Insights.flsnp" />
                        </p>
                    </blockquote>
                    <ol MadCap:continue="true">
                        <li class="numbered_list_print">...a data stream in an&#160;SSR or TSR</li>
                    </ol>
                    <p style="text-indent: 0.5in;">Ask your systems administrator if you need help with this bit. </p>
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <MadCap:pageBreak />
            <MadCap:snippetBlock src="../Resources/Snippets/Interface Query &amp; FTS.flsnp" />
            <p>For information about the interface displayed once a free text search or query has been run.<MadCap:conditionalText MadCap:conditions="Output.Digital"> See: <MadCap:xref href="Visualizing Results User Guide.htm#VisualizingInterface">The Visualization Interface</MadCap:xref>.</MadCap:conditionalText></p>
            <MadCap:pageBreak />
            <h2><MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> Query</h2>
            <p><MadCap:variable name="General.Product Name&#160;Insights (Full)" /> provides you with a simple SQL-like query language that enables you to get the most from your data streams.&#160;</p>
            <p>This guide will talk you through the principles that underpin querying in <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />, explain how to create a simple query from scratch, and provide reference material for more experienced users to use to build sophisticated queries. </p>
            <MadCap:pageBreak />
            <MadCap:dropDown>
                <MadCap:dropDownHead class="H2NoKeyline">
                    <MadCap:dropDownHotspot><a name="QueryBasics"></a>Query Basics</MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody>
                    <p><MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> makes use of a simple SQL-like query language. This means that we use a simple syntax that will be familiar to anyone with any SQL experience. </p>
                    <MadCap:snippetBlock src="../Resources/Snippets/Query Syntax Highlight.flsnp" />
                    <p>To run a basic query, you only need three simple clauses: <code>from</code>, <code>select </code>and  <code>where</code>.</p>
                    <h3>from</h3>
                    <MadCap:snippetBlock src="../Resources/Snippets/Query Definition From.flsnp" />
                    <p>
                        <MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Clauses/from.htm">from</MadCap:xref> is used in every single <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> query, followed by the
entity that you are querying:</p>
                    <blockquote>
                        <div class="system-message">
                            <MadCap:snippetText src="../Resources/Snippets/Query Syntax From.flsnp" /> </div>
                        <div class="system-message"><![CDATA[                ]]></div>
                    </blockquote>
                    <p>If you are querying historical data (in a TSR), then you
also have to use the operator <code>historical</code> in front of the stream name. For
example:</p>
                    <blockquote>
                        <p>
                            <MadCap:snippetText src="../Resources/Snippets/Query Syntax From Historical.flsnp" />
                        </p>
                    </blockquote>
                    <p>The most obvious difference from regular SQL is that in <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> queries, <code><MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Clauses/select.htm">Select</MadCap:xref></code> comes after <code>from</code>. There is a good reason for this:&#160;<MadCap:xref href="#TransformationalPipeline">The Transformational Pipeline</MadCap:xref>.</p>
                    <h3>where</h3>
                    <MadCap:snippetBlock src="../Resources/Snippets/Query Definition Where.flsnp" />
                    <p>
                        <MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Clauses/where.htm">Where</MadCap:xref> allows you to further transform your query by specifying a condition to query. </p>
                    <MadCap:snippetBlock src="../Resources/Snippets/Query Syntax Where.flsnp" />
                    <h3>select</h3>
                    <MadCap:snippetBlock src="../Resources/Snippets/Query Definition Select.flsnp" />
                    <p>
                        <MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Clauses/select.htm">Select</MadCap:xref> is used to determine which fields you want the query to return. </p>
                    <MadCap:snippetBlock src="../Resources/Snippets/Query Syntax Select.flsnp" />
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <MadCap:pageBreak />
            <MadCap:dropDown>
                <MadCap:dropDownHead class="H2NoKeyline">
                    <MadCap:dropDownHotspot><a name="TransformationalPipeline"></a>The Transformational Pipeline</MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody>
                    <MadCap:snippetBlock src="../Resources/Snippets/Definition Transformational Pipeline.flsnp" />
                    <p><MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> queries works as a pipeline of stream transformations.</p>
                    <p>This is best explained using a simple example. Let's assume we have a stream <code>/streams/demo/infrastructure/cpu</code> that is stored in a repository containing the following data:</p>
                    <blockquote><pre>[
  { "host": "c.itrs", "process": "Excel", "user": 50.0, "kernel": 75.0 },
  { "host": "a.itrs", "process": "Oracle", "user": 60.0, "kernel": 25.0 },
  { "host": "b.itrs", "process": "RiskEngine", "user": 70.0, "kernel": 99.0 }
]</pre>
                    </blockquote>
                    <p>We start by just getting the data from the repository. To do this, we simply use a <code>from</code> query with the <code>historical</code> key word, but you can perform this on streaming data, too:</p>
                    <blockquote>
                        <p><code>from historical /streams/demo/infrastructure/cpu</code>
                        </p>
                    </blockquote>
                    <p>This will give us the data from the stream without any transformations being applied:</p>
                    <blockquote>
                        <p style="text-align: left;">
                            <img src="../Resources/Images/pipelineexample1.png" class="screenshotsmedium" style="width: 517px;height: 454px;" />
                        </p>
                    </blockquote>
                    <p>Now we can modify the query and start performing some transformations.</p>
                    <p>Lets add a <code>where</code> clause:</p>
                    <blockquote><pre xml:space="preserve">from historical /streams/demo/infrastructure/cpu
where kernel &gt; 10</pre>
                    </blockquote>
                    <p>The results of this first transformation would be:</p>
                    <blockquote><pre>[
  { "host": "c.itrs", "process": "Excel", "user": 50.0, "kernel": 75.0 },
  { "host": "b.itrs", "process": "RiskEngine", "user": 70.0, "kernel": 99.0 }
]</pre>
                    </blockquote>
                    <p>Lets add a further transformation, ordering by the host field:</p>
                    <blockquote><pre xml:space="preserve">from historical /streams/demo/infrastructure/cpu
where kernel &gt; 50
order by host</pre>
                    </blockquote>
                    <p>Now we have:</p>
                    <blockquote><pre>[
  { "host": "b.itrs", "process": "RiskEngine", "user": 70.0, "kernel": 99.0 },
  { "host": "c.itrs", "process": "Excel", "user": 50.0, "kernel": 75.0 }
]</pre>
                    </blockquote>
                    <p>Our final transformation will select some fields and alias them:</p>
                    <blockquote><pre>from historical /streams/demo/infrastructure/cpu
where kernel &gt; 50
order by host
select process as p, user as u, kernel as k</pre>
                    </blockquote>
                    <p>This returns:</p>
                    <blockquote><pre>[
  { "p": "RiskEngine", "u": 70.0, "k": 99.0 },
  { "p": "Excel", "u": 50.0, "k": 75.0 }
]</pre>
                    </blockquote>
                    <p>As each ‘instruction’ operates on the data emitted from the previous instruction, transformations can be specified in any order, the following query could be re-written like so and it would emit the same results:</p>
                    <blockquote><pre>from historical /streams/demo/infrastructure/cpu
select process as p, user as u, kernel as k
order by host
where kernel &gt; 50</pre>
                    </blockquote>
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <MadCap:pageBreak />
            <MadCap:dropDown>
                <MadCap:dropDownHead class="H2NoKeyline">
                    <MadCap:dropDownHotspot><a name="Query"></a>Run a Query</MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody>
                    <h3>Select a Notebook</h3>
                    <p>To run a query in <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />, you need a <strong class="green">Notebook</strong>. If you don't already have one, create one:</p>
                    <blockquote>
                        <MadCap:snippetBlock src="../Resources/Snippets/How To Create Notebook.flsnp" />
                    </blockquote>
                    <p>Once you've created a notebook, you're ready to write and run queries.</p>
                    <p>Start with a simple <code>from</code> or <code>from historical</code> query - it'll allow you see your data without applying any filter or analytics to it.</p>
                    <blockquote>
                        <MadCap:snippetBlock src="../Resources/Snippets/How To Create Query.flsnp" />
                    </blockquote>
                    <p>If you ran your query on a valid stream using valid syntax, you should now see your data streaming into the results window in a table format:</p>
                    <blockquote>
                        <p style="text-align: left;">
                            <img src="../Resources/Images/createquery4.png" class="screenshotsmedium" style="width: 367px;height: 512px;" />
                        </p>
                        <p class="caption">Results Window</p>
                    </blockquote>
                    <p>You can now group your results and sort them by clicking on the column headers in the same way that you would a commercial spreadsheet program.</p>
                    <p>You'll also notice that the visualization panel has appeared below the query you wrote. This allows you  to start visualizing your data, and even start putting it into <strong class="green">Dashboards</strong>.<MadCap:conditionalText MadCap:conditions="Output.Digital"> Check out our <MadCap:xref href="Visualizing Results User Guide.htm">[%=General.Product Name&#160;Insights (Full)%] Visualizing Results User Guide</MadCap:xref> and our <MadCap:xref href="Dashboard, Notebook &amp; Collection User Guide.htm">[%=General.Product Name&#160;Insights (Full)%] &#160;Notebook&#160;&amp; Dashboard User Guide</MadCap:xref>.</MadCap:conditionalText></p>
                    <p>The query you created will be saved automatically. You can edit it, duplicate it or delete it at any time.</p>
                    <blockquote>
                        <MadCap:snippetBlock src="../Resources/Snippets/How to Edit Query.flsnp" />
                    </blockquote>
                    <blockquote>
                        <MadCap:snippetBlock src="../Resources/Snippets/How to Delete Query.flsnp" />
                    </blockquote>
                    <p>&#160;</p>
                    <p MadCap:conditions="Output.Null">If you want to share your queries, then that's easy, too:</p>
                    <blockquote MadCap:conditions="Output.Null">
                        <MadCap:snippetBlock src="../Resources/Snippets/How to Export Query.flsnp" />
                    </blockquote>
                    <blockquote MadCap:conditions="Output.Null">
                        <MadCap:snippetBlock src="../Resources/Snippets/How to Import Query.flsnp" />
                    </blockquote>
                    <p>&#160;</p>
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <MadCap:pageBreak />
            <MadCap:dropDown>
                <MadCap:dropDownHead class="H2NoKeyline">
                    <MadCap:dropDownHotspot><a name="AdvancedQuery"></a>Run an Advanced Query</MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody>
                    <p>Now that you've run a simple from query, it's time to discuss how you can build more complex queries. </p>
                    <p>We're assuming that you have read through <MadCap:xref href="#TransformationalPipeline">The Transformational Pipeline</MadCap:xref> and understand the transformational nature of the <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> query, but if you have not then do so now. </p>
                    <p>Advanced querying of your data streams requires you to understand the three key components: </p>
                    <ol>
                        <li>What <strong class="green">format </strong>your data is in, and the <strong class="green">fields </strong>it contains (is the stream made up of dates, time, geocordinates, ISO numbers? Does it contain strings, Boolean values?) While this information is defined by the schema that accompanied the stream when it was imported into <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />, you've got to be familiar with it if you want to query it</li>
                        <li>How to combine SQL-like <strong class="green">clauses</strong> (sometimes called <strong class="green">transformations</strong>), <strong class="green">functions </strong>and <strong class="green">operators </strong>together to interrogate your data</li>
                        <li>How you can use <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />' concepts - <strong class="green">Domains </strong>and <strong class="green">Collections</strong>, for example - to enhance your ability to get the most from your data</li>
                    </ol>
                    <h3>Your Data Stream</h3>
                    <p>If you are familiar with your stream, move on to learning about the query syntax and constructions that you can use in <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />. </p>
                    <p>If you don't know what data your stream contains, take a look at the <strong class="green">schema </strong>for the stream. </p>
                    <MadCap:snippetBlock src="../Resources/Snippets/Definition Schema.flsnp" />
                    <MadCap:snippetBlock src="../Resources/Snippets/How To View Schema.flsnp" />
                    <p>If you need to know more, check out our <MadCap:xref href="Data Streams &amp; Schema User Guide.htm">[%=General.Product Name&#160;Insights (Full)%] Data Streams &amp;&#160;Schema User Guide</MadCap:xref>.</p>
                    <h3><MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />' Query&#160;Syntax &amp;&#160;Constructions</h3>
                    <p>Query clauses are the foundation of <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />' transformational query capability. </p>
                    <p>There are a limited number of them, and if you have any SQL experience you should be familiar with them. If not, we'd recommend taking a free online SQL course as a quick primer (you can try <a href="https://www.codecademy.com/learn/learn-sql">Code Academy</a>, for <MadCap:annotation MadCap:createDate="2016-10-11T16:38:36.6893974+01:00" MadCap:creator="mddent" MadCap:initials="MD" MadCap:comment="Moved the Insights Query Clauses (Transformations) snippet to a new topic called Query Clause Transfomations" MadCap:editor="mddent" MadCap:editDate="2016-10-11T16:40:09.0861143+01:00">example</MadCap:annotation>). </p>
                    <p>See <MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Clauses Transformations.htm">"" on page&#160;1 for information about Query Clauses Transformations.</MadCap:xref></p>
                    <p>Combine the transformational clauses with <MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Functions.htm">Query&#160;Functions</MadCap:xref> and <MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Operators.htm">Query Operators</MadCap:xref> to deliver sophisticated query capabilities. </p>
                    <p>There are a huge range of functions to work with in <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />. These can be divided into two groups: scalar and aggregate.</p>
                    <h3>Scalar</h3>
                    <p>Scalar functions operate on a single input value and returns an output value. For numeric data, these include simple arithmetic operations (addition, subtraction, multiplication and division). For string values, examples of scalar functions include transforming a string into lower or upper case or even to a datetime format.</p>
                    <p>Let's say we want to create a new field for the hour of day, we can use <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />' hour function to convert the sampleTime field into a numeric field:</p>
                    <blockquote>
                        <p><code>from /streams/environment/sensors/air</code>
                        </p>
                    </blockquote>
                    <blockquote>
                        <p><code>select hour(sampleTime)as hourOfDay, area, carbonm</code>
                        </p>
                    </blockquote>
                    <p class="note"> Note how we have also given our new field an alias of 'hourOfDay' using the term 'as'.</p>
                    <h3>Aggregate</h3>
                    <p>Aggregate functions operate on a group of input values to compute a single result. Examples include count, <MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Functions.htm#counter">counter</MadCap:xref>, <MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Functions.htm#sum">sum</MadCap:xref>, avg, <MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Functions.htm#min">min</MadCap:xref> and <MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Functions.htm#max">max</MadCap:xref>.</p>
                    <p>You can use them on historical data using the <code>historical </code>clause, or you can use them on real-time streaming data.</p>
                    <p>In real time queries, in order to use aggregate functions, we firstly need to group by a time dimension (using a window), followed by an aggregation function. We can also group by further variables after the time window.</p>
                    <p>For example:</p>
                    <blockquote><pre>from /streams/environment/sensors/air
where carbonm &gt; 15
group by sampleTime window of 2 minutes, area
select sampleTime, area, count(carbonm) as criticalCarbonMCount</pre>
                    </blockquote>
                    <p MadCap:conditions="Output.Digital">See <MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Functions.htm">"Query&#160;Functions" on page&#160;1</MadCap:xref> and <MadCap:xref href="../B_Technical Reference/Query Clauses, Functions &amp; Operators/Query Operators.htm">"Query Operators" on page&#160;1</MadCap:xref> for more information.</p>
                    <p MadCap:conditions="Output.Digital">More information on field identifiers, formats and types can be found here: <MadCap:xref href="../B_Technical Reference/Schema Fields &amp; Types/field_identifiers_and_formats.htm">Field Identifiers and Formats.</MadCap:xref></p>
                    <h3>Using <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />' Data Structure to Improve your Queries</h3>
                    <MadCap:snippetBlock src="../Resources/Snippets/About Query Domain.flsnp" />
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <p>See Query Functions and Query Operators for more information</p>
            <MadCap:pageBreak />
            <h2><a name="Search"></a><MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> FREE&#160;TEXT&#160;Search </h2>
            <p><MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" />' allows you to conduct a free text search across all of your data streams at the same time. </p>
            <p class="note">In <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> <MadCap:variable name="Version.CurrentInsights" />, only a single search term can be entered, and Boolean operators are not supported. </p>
            <p>Similar to an internet search engine, <strong class="green">Free Text&#160;Search</strong> searches your data for a number or text string that you specify.</p>
            <p>The search capability supports the wildcard *, allows you to search within a query and across multiple data streams. It returns and orders results based on their relevance.</p>
            <MadCap:dropDown>
                <MadCap:dropDownHead class="H2NoKeyline">
                    <MadCap:dropDownHotspot>Run a Free Text Search</MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody>
                    <blockquote>
                        <MadCap:snippetBlock src="../Resources/Snippets/How To Create Text Search.flsnp" />
                    </blockquote>
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <MadCap:pageBreak />
            <MadCap:dropDown>
                <MadCap:dropDownHead class="H2NoKeyline">
                    <MadCap:dropDownHotspot>Explore FREE&#160;TEXT&#160;Search&#160;Results </MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody>
                    <p>Free text search results are displayed in the results window.</p>
                    <p>If there is more that one
stream in which the search string is found, these the results will be presented in a expanding text box (one for each stream).</p>
                    <p>For example, searching for  "192.168.220.43" in a collection of
streams from <MadCap:variable name="General.ProductNameGeneos" /> returns:</p>
                    <p>
                        <img src="../Resources/Images/Freetextsearch_results.png" class="screenshotsmedium" style="width: 312px;height: 236px;" />
                    </p>
                    <p>A taxonomy of the results is displayed on the right. Click the check boxes to select a
subset of the results and highlight them in the  histogram.</p>
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <MadCap:dropDown MadCap:conditions="Output.Null">
                <MadCap:dropDownHead class="H2NoKeyline">
                    <MadCap:dropDownHotspot>Free Text Search within in A query</MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <p>If you want to search a specific stream, you can use do so using a <strong class="green">query</strong>. Just be aware that, unlike the results of a free text search, query results are not broken down by data stream, and no taxonomy of results is generated.</p>
                <p>For example:</p>
                <blockquote>
                    <p><code>from /streams/demo/infrastructure/log</code>
                    </p>
                </blockquote>
                <blockquote>
                    <p><code>where search(“your search string”)</code>
                    </p>
                </blockquote>
                <MadCap:dropDownBody>
                    <p>You can also use the <strong>fuzzy</strong> keyword:</p>
                    <div class="system-message"><pre class="literal-block" xml:space="preserve">
from /streams/demo/infrastructure/log
fuzzy "gif*"
</pre>
                    </div>
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <MadCap:pageBreak />
            <h2><a name="Transform"></a>Transform Data</h2>
            <p><MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> stores stream data immutably - the data from
the original stream cannot be changed.</p>
            <p>However, you can easily create a derived stream, even if the original data is live and not being stored as a stream. When you create a derived stream, a schema for it is created implicitly.</p>
            <p class="note">Note: a derived stream will exist only in the Notebook you created it in and will not appear in your Streams listing on the <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> Home screen. A derived stream will be lost when you exit  <MadCap:variable name="General.Product Name Insights&#160;(abbreviated)" /> session.</p>
            <MadCap:snippetBlock src="../Resources/Snippets/How To Create Derived Stream.flsnp" />
            <p>Once you've created a derived stream, you can query it in the same way that you would any streaming or historical stream:</p>
            <MadCap:snippetBlock src="../Resources/Snippets/Query Syntax Derived Stream.flsnp" />
            <MadCap:snippetBlock src="../Resources/Snippets/Query Syntax Historical Derived Stream.flsnp" />
        </body>
    </body>
</html>
<?xml version="1.0" encoding="utf-8"?>
<html MadCap:lastBlockDepth="8" MadCap:lastHeight="12526" MadCap:lastWidth="1730" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Streams and Dataviews</title>
        <style type="text/css">
/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7614 2013-02-21 15:55:51Z milde $
:Copyright: This stylesheet has been placed in the public domain.
Default cascading style sheet for the HTML output of Docutils.
See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/
/* used to remove borders from tables and images */
.borderless,
table.borderless td,
table.borderless th
{
	border: 0;
}
table.borderless td,
table.borderless th
{
	/* Override padding for "table.docutils td" with "! important".
 The right padding separates the table cells. */
	padding: 0 0.5em 0 0 !important;
}
.first
{
	/* Override more specific margin styles with "! important". */
	margin-top: 0 !important;
}
.last,
.with-subtitle
{
	margin-bottom: 0 !important;
}
.hidden
{
	display: none;
}
a.toc-backref
{
	text-decoration: none;
	color: black;
}
blockquote.epigraph
{
	margin: 2em 5em;
}
dl.docutils dd
{
	margin-bottom: 0.5em;
}
object[type="image/svg+xml"],
object[type="application/x-shockwave-flash"]
{
	overflow: hidden;
}
/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
 font-weight: bold }
*/
div.abstract
{
	margin: 2em 5em;
}
div.abstract p.topic-title
{
	font-weight: bold;
	text-align: center;
}
div.admonition,
div.attention,
div.caution,
div.danger,
div.error,
div.hint,
div.important,
div.note,
div.tip,
div.warning
{
	margin: 2em;
	border: medium outset;
	padding: 1em;
}
div.admonition p.admonition-title,
div.hint p.admonition-title,
div.important p.admonition-title,
div.note p.admonition-title,
div.tip p.admonition-title
{
	font-weight: bold;
	font-family: sans-serif;
}
div.attention p.admonition-title,
div.caution p.admonition-title,
div.danger p.admonition-title,
div.error p.admonition-title,
div.warning p.admonition-title,
.code .error
{
	color: red;
	font-weight: bold;
	font-family: sans-serif;
}
/* Uncomment (and remove this text!) to get reduced vertical space in
 compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
 margin-bottom: 0.5em }
div.compound .compound-last, div.compound .compound-middle {
 margin-top: 0.5em }
*/
div.dedication
{
	margin: 2em 5em;
	text-align: center;
	font-style: italic;
}
div.dedication p.topic-title
{
	font-weight: bold;
	font-style: normal;
}
div.figure
{
	margin-left: 2em;
	margin-right: 2em;
}
div.footer,
div.header
{
	clear: both;
	font-size: smaller;
}
div.line-block
{
	display: block;
	margin-top: 1em;
	margin-bottom: 1em;
}
div.line-block div.line-block
{
	margin-top: 0;
	margin-bottom: 0;
	margin-left: 1.5em;
}
div.sidebar
{
	margin: 0 0 0.5em 1em;
	border: medium outset;
	padding: 1em;
	background-color: #ffffee;
	width: 40%;
	float: right;
	clear: right;
}
div.sidebar p.rubric
{
	font-family: sans-serif;
	font-size: medium;
}
div.system-messages
{
	margin: 5em;
}
div.system-messages h1
{
	color: red;
}
div.system-message
{
	border: medium outset;
	padding: 1em;
}
div.system-message p.system-message-title
{
	color: red;
	font-weight: bold;
}
div.topic
{
	margin: 2em;
}
h1.section-subtitle,
h2.section-subtitle,
h3.section-subtitle,
h4.section-subtitle,
h5.section-subtitle,
h6.section-subtitle
{
	margin-top: 0.4em;
}
h1.title
{
	text-align: center;
}
h2.subtitle
{
	text-align: center;
}
hr.docutils
{
	width: 75%;
}
img.align-left,
.figure.align-left,
object.align-left
{
	clear: left;
	float: left;
	margin-right: 1em;
}
img.align-right,
.figure.align-right,
object.align-right
{
	clear: right;
	float: right;
	margin-left: 1em;
}
img.align-center,
.figure.align-center,
object.align-center
{
	display: block;
	margin-left: auto;
	margin-right: auto;
}
.align-left
{
	text-align: left;
}
.align-center
{
	clear: both;
	text-align: center;
}
.align-right
{
	text-align: right;
}
/* reset inner alignment in figures */
div.align-right
{
	text-align: inherit;
}
/* div.align-center * { */
/* text-align: left } */
ol.simple,
ul.simple
{
	margin-bottom: 1em;
}
ol.arabic
{
	list-style: decimal;
}
ol.loweralpha
{
	list-style: lower-alpha;
}
ol.upperalpha
{
	list-style: upper-alpha;
}
ol.lowerroman
{
	list-style: lower-roman;
}
ol.upperroman
{
	list-style: upper-roman;
}
p.attribution
{
	text-align: right;
	margin-left: 50%;
}
p.caption
{
	font-style: italic;
}
p.credits
{
	font-style: italic;
	font-size: smaller;
}
p.label
{
	white-space: nowrap;
}
p.rubric
{
	font-weight: bold;
	font-size: larger;
	color: maroon;
	text-align: center;
}
p.sidebar-title
{
	font-family: sans-serif;
	font-weight: bold;
	font-size: larger;
}
p.sidebar-subtitle
{
	font-family: sans-serif;
	font-weight: bold;
}
p.topic-title
{
	font-weight: bold;
}
pre.address
{
	margin-bottom: 0;
	margin-top: 0;
	font: inherit;
}
pre.literal-block,
pre.doctest-block,
pre.math,
pre.code
{
	margin-left: 2em;
	margin-right: 2em;
}
pre.code .ln
{
	color: grey;
}
/* line numbers */
pre.code,
code
{
	background-color: #eeeeee;
}
pre.code .comment,
code .comment
{
	color: #5C6576;
}
pre.code .keyword,
code .keyword
{
	color: #3B0D06;
	font-weight: bold;
}
pre.code .literal.string,
code .literal.string
{
	color: #0C5404;
}
pre.code .name.builtin,
code .name.builtin
{
	color: #352B84;
}
pre.code .deleted,
code .deleted
{
	background-color: #DEB0A1;
}
pre.code .inserted,
code .inserted
{
	background-color: #A3D289;
}
span.classifier
{
	font-family: sans-serif;
	font-style: oblique;
}
span.classifier-delimiter
{
	font-family: sans-serif;
	font-weight: bold;
}
span.interpreted
{
	font-family: sans-serif;
}
span.option
{
	white-space: nowrap;
}
span.pre
{
	white-space: pre;
}
span.problematic
{
	color: red;
}
span.section-subtitle
{
	/* font-size relative to parent (h1..h6 element) */
	font-size: 80%;
}
table.citation
{
	border-left: solid 1px gray;
	margin-left: 1px;
}
table.docinfo
{
	margin: 2em 4em;
}
table.docutils
{
	margin-top: 0.5em;
	margin-bottom: 0.5em;
}
table.footnote
{
	border-left: solid 1px black;
	margin-left: 1px;
}
table.docutils td,
table.docutils th,
table.docinfo td,
table.docinfo th
{
	padding-left: 0.5em;
	padding-right: 0.5em;
	vertical-align: top;
}
table.docutils th.field-name,
table.docinfo th.docinfo-name
{
	font-weight: bold;
	text-align: left;
	white-space: nowrap;
	padding-left: 0;
}
/* "booktabs" style (no vertical lines) */
table.docutils.booktabs
{
	border: 0px;
	border-top: 2px solid;
	border-bottom: 2px solid;
	border-collapse: collapse;
}
table.docutils.booktabs *
{
	border: 0px;
}
table.docutils.booktabs th
{
	border-bottom: thin solid;
	text-align: left;
}
h1 tt.docutils,
h2 tt.docutils,
h3 tt.docutils,
h4 tt.docutils,
h5 tt.docutils,
h6 tt.docutils
{
	font-size: 100%;
}
ul.auto-toc
{
	list-style-type: none;
}

</style>
    </head>
    <body>
        <div class="document" id="streams-and-dataviews">
            <h1>Streams and Dataviews</h1>
            <p>Valo publishes data from Geneos Gateways by subscribing to topics that correspond to dataviews and other Gateway data.</p>
            <p>In application.conf, <cite>valo.transport.geneos.streams</cite> is an array of Stream definitions. Each stream has the following settings:</p>
            <table border="1" class="docutils">
                <colgroup>
                    <col width="26%" />
                    <col width="74%" />
                </colgroup>
                <thead valign="bottom">
                    <tr>
                        <th class="head">Setting</th>
                        <th class="head">Description</th>
                    </tr>
                </thead>
                <tbody valign="top">
                    <tr>
                        <td>stream</td>
                        <td>The target stream</td>
                    </tr>
                    <tr>
                        <td>topics</td>
                        <td>An array of string topics (See below)</td>
                    </tr>
                    <tr>
                        <td>auto-config.schema-path</td>
                        <td>A file that will be used to create the schema for the stream</td>
                    </tr>
                    <tr>
                        <td>auto-config.taxonomy-path</td>
                        <td>A file that will be used to create the taxonomy for the stream</td>
                    </tr>
                    <tr>
                        <td>auto-config.repository</td>
                        <td>If present, the repository will be set. Only 'ssr' is supported at this time</td>
                    </tr>
                </tbody>
            </table>
            <p>The following creates a stream publishing all updates from dataviews called <cite>CPU</cite> to the stream <cite>/streams/demo/geneos/cpu</cite>.</p>
            <p class="note">Note: As there is no <cite>auto-config.schema-path</cite> specified, It is up to you to ensure that you define a schema for the stream. If no schema is defined, no data will be published!</p><pre class="literal-block" xml:space="preserve">
valo.transport.geneos.streams : [
        {
          stream: "/streams/demo/geneos/cpu",
          topics: ["raw.table.CPU"]
        }
    ]
</pre>
            <p>Alternatively, you can specify a schema/taxonomy from a file containing the corresponding json document. The following defines a stream using a schema and taxonomy file, and configures the stream to be stored in the semi structured repository.</p>
            <p class="note">Note: There are some example schemas shipped with the Valo node, in <cite>resources/geneos</cite>. ${valo.home} is the installation directory of the node.</p><pre class="literal-block" xml:space="preserve">
valo.transport.geneos.streams : [
        {
          stream: "/streams/demo/geneos/cpu",
          topics: ["raw.table.CPU"],
          auto-config: {
            schema-path: ${valo.home}"/resources/geneos/metadata-severity-schema.json"
            taxonomy-path : ${valo.home}"/resources/geneos/metadata-severity-taxonomy.json"
            repository: "ssr"
          }
        }
    ]
</pre>
            <p>As topics is a list, you can specify multiple entries. It is important that all of these have the same data shape!</p><pre class="literal-block" xml:space="preserve">
valo.transport.geneos.streams : [
        {
          stream: "/streams/demo/geneos/cpu",
          topics: [
            "raw.table.X",
            "raw.table.Y",
            "raw.table.Z"
          ]
        }
    ]
</pre>
            <div class="section" id="topics">
                <h2>Topics</h2>
                <p>There are two types of topic published by the Gateway, Dataviews and Metadata</p>
                <div class="section" id="dataview-topics">
                    <h3>Dataview Topics</h3>
                    <p>Dataview topics are composed of the Geneos path names in reverse. If we have a path to a dataview:</p>
                    <p><pre class="system-message" xml:space="preserve">
/geneos/gateway[(@name="mygateway")]/directory/probe[(@name="mynetprobe")]/managedEntity[(@name="myentity")]/sampler[(@name="mysampler")][(@type="")]/dataview[(@name="CPU")]
</pre>
                    </p>
                    <p>We can subscribe to this dataview row data using the topic <cite>raw.table.CPU</cite>. The prefix <cite>raw.table</cite> indicates we want the raw row data (See below for other prefix's), and <cite>CPU</cite> is the name of the dataview.</p>
                    <p class="note">Note: This will match ALL dataviews with this name, across ALL connected Gateways</p>
                    <p>We can narrow the topic by adding the names. So we could choose any dataview called 'CPU', with sampler 'mysampler' : <cite>raw.table.CPU.mysampler</cite></p>
                    <p>Or the full topic: <cite>raw.table.CPU.mysampler..myentity.mynetprobe.mygateway</cite></p>
                    <p>The full topic specification is:</p><pre class="system-message" xml:space="preserve">
&lt;prefix&gt;.&lt;dataview_name&gt;.&lt;sampler_name&gt;.&lt;sampler_type&gt;.&lt;entity_name&gt;.&lt;probe_name&gt;.&lt;gateway_name&gt;
</pre>
                    <p>The prefixes:</p>
                    <table border="1" class="docutils">
                        <colgroup>
                            <col width="38%" />
                            <col width="62%" />
                        </colgroup>
                        <thead valign="bottom">
                            <tr>
                                <th class="head">Prefix</th>
                                <th class="head">Description</th>
                            </tr>
                        </thead>
                        <tbody valign="top">
                            <tr>
                                <td>raw.table</td>
                                <td>The raw dataview row data</td>
                            </tr>
                            <tr>
                                <td>raw.headlines</td>
                                <td>The raw headline data</td>
                            </tr>
                            <tr>
                                <td>enriched.table</td>
                                <td>The enriched dataview row data</td>
                            </tr>
                            <tr>
                                <td>enriched.headlines</td>
                                <td>The enriched headline data</td>
                            </tr>
                        </tbody>
                    </table>
                    <p>Enriched dataviews include any gateway computed values. Enriched dataviews <strong>always</strong> have the gateway sample time, as appose the the raw dataviews which contain the netprobe sampler time.
Note: The shape of the data is the same.</p>
                    <p>Example of the row data: (<cite>raw.table.</cite> and <cite>enriched.table.</cite>).</p><pre class="literal-block" xml:space="preserve"><MadCap:conditionalText MadCap:conditions="Output.Null">
.. sourcecode:: json</MadCap:conditionalText>
        {
          "data": {
            "sampleTime": "2015-07-02T09:59:14.053Z",
                "name": "cpu_0",
            "row": {
              "type": "GenuineIntel Intel(R)",
              "state": "on-line",
              "clockSpeed": "3161.29 Mhz",
              "percentUtilisation": "0.74 %",
              "percentUserTime": "0.15 %",
              "percentKernelTime": "0.08 %",
              "percentWaitTime": "0.52 %",
              "percentIdle": "99.26 %"
            }
          },
          "operation": "create"
        }
</pre>
                    <p>Example of the headline data: (<cite>raw.headlines.</cite> and <cite>enriched.headlines.</cite>)</p><pre class="literal-block" xml:space="preserve"><MadCap:conditionalText MadCap:conditions="Output.Null">
.. sourcecode:: json</MadCap:conditionalText>
        {
          "data": {
            "sampleTime": "2015-07-02T09:59:14.053Z",
                "samplingStatus": "OK",
            "numOnlineCpus": "1",
            "loadAverage1Min": "0.00",
            "loadAverage5Min": "0.00",
            "loadAverage15Min": "0.00",
            "numPhysicalCpus": "1",
            "HyperThreadingStatus": "NA",
            "numCpuCores": "NA"
          },
          "operation": "update"
        }
</pre>
                </div>
                <h3>Metadata Topics</h3>
                <p>There are 3 meta data topics that you can subscribe to:</p>
                <table border="1" class="docutils">
                    <colgroup>
                        <col width="26%" />
                        <col width="74%" />
                    </colgroup>
                    <thead valign="bottom">
                        <tr>
                            <th class="head">Topic</th>
                            <th class="head">Description</th>
                        </tr>
                    </thead>
                    <tbody valign="top">
                        <tr>
                            <td>metadata.severity</td>
                            <td>Severity state for all directory components, cells and headlines</td>
                        </tr>
                        <tr>
                            <td>metadata.snooze</td>
                            <td>Snooze state for all directory components, cells and headlines</td>
                        </tr>
                        <tr>
                            <td>metadata.userAssignment</td>
                            <td>User Assignment state for all directory components, cells and headlines</td>
                        </tr>
                    </tbody>
                </table>
                <p>Example <cite>metadata.severity</cite>:</p><pre class="literal-block" xml:space="preserve"><MadCap:conditionalText MadCap:conditions="Output.Null">
.. sourcecode:: json</MadCap:conditionalText>
        {
          "data": {
            "timestamp": "2015-08-10T13:30:16.170Z",
            "target": {
              "gateway": "g",
              "probe": "p",
              "managedEntity": "m",
              "type": "",
              "sampler": "t",
              "dataview": "t",
              "row": "r1",
              "column": "col3"
            },
            "severity": "WARNING",
            "active": true
          },
          "operation": "create"
        }
</pre>
                <p>Example <cite>metadata.snooze</cite>:</p><pre class="literal-block" xml:space="preserve">
<MadCap:conditionalText MadCap:conditions="Output.Null">.. sourcecode:: json</MadCap:conditionalText>
        {
          "data": {
            "timestamp": "2015-08-10T13:34:19.356Z",
            "target": {
              "gateway": "g",
              "probe": "p",
              "managedEntity": "m",
              "type": "",
              "sampler": "t",
              "dataview": "t",
              "row": "r0",
              "column": "col3"
            },
            "snoozed": {
              "snoozed": true,
              "snoozedBy": "ActiveConsole1",
              "comment": "",
              "period": "SeverityToOrTime",
              "untilSeverity": "OK",
              "untilTime": "2015-08-11T13:34:19.000Z"
            }
          },
          "operation": "update"
        }
</pre>
                <p>Example <cite>metadata.userAssignment</cite>:</p><pre class="literal-block" xml:space="preserve"><MadCap:conditionalText MadCap:conditions="Output.Null">
.. sourcecode:: json</MadCap:conditionalText>
        {
          "data": {
            "timestamp": "2015-08-10T13:41:50.973Z",
            "target": {
              "gateway": "g",
              "probe": "p",
              "managedEntity": "m",
              "type": "",
              "sampler": "t",
              "dataview": "t",
              "row": "r1",
              "column": "comp"
            },
            "userAssignment": {
              "userAssigned": true,
              "assignedTo": "ANOther",
              "comment": "",
              "period": "Until a change in value",
              "untilValue": "computed"
            }
          },
          "operation": "update"
        }
</pre>
            </div>
            <div class="section" id="filtering">
                <h2>Filtering</h2>
                <p>Since Gateway 3.6.0, <tt class="docutils literal">data.target</tt> information were added to the geneos publishing dataview (aka metrics) data to describe the source of data. In gateway 3.7.0, additional information was added <tt class="docutils literal">data.target.filter</tt> to supply the OS type and plugin name from which the data came.</p>
                <p>&#160;</p>
                <p>Example of the row data: (<cite>raw.table.</cite> and <cite>enriched.table.</cite>).</p><pre class="literal-block" xml:space="preserve"><MadCap:conditionalText MadCap:conditions="Output.Null">
.. sourcecode:: json</MadCap:conditionalText>
        {
          "data": {
            "sampleTime": "2015-07-02T09:59:14.053Z",
            "target" : {
              "gateway" : "g",
              "probe" : "p",
              "managedEntity" : "m",
              "type" : "",
              "sampler" : "s",
              "dataview" : "d",
              "filter" : {
                "osType" : "Linux",
                "pluginName" : "CPU"
              }
            },
            "name": "cpu_0",
            "row": {
              "type": "GenuineIntel Intel(R)",
              "state": "on-line",
              "clockSpeed": "3161.29 Mhz",
              "percentUtilisation": "0.74 %",
              "percentUserTime": "0.15 %",
              "percentKernelTime": "0.08 %",
              "percentWaitTime": "0.52 %",
              "percentIdle": "99.26 %"
            }
          },
          "operation": "create"
        }
</pre>
                <p>Example of the headline data: (<cite>raw.headlines.</cite> and <cite>enriched.headlines.</cite>)</p><pre class="literal-block" xml:space="preserve">
<MadCap:conditionalText MadCap:conditions="Output.Null">.. sourcecode:: json</MadCap:conditionalText>
        {
          "data": {
            "sampleTime": "2015-07-02T09:59:14.053Z",
            "target" : {
              "gateway" : "g",
              "probe" : "p",
              "managedEntity" : "m",
              "type" : "",
              "sampler" : "s",
              "dataview" : "d",
              "filter" : {
                "osType" : "Linux",
                "pluginName" : "CPU"
              }
            },
            "samplingStatus": "OK",
            "numOnlineCpus": "1",
            "loadAverage1Min": "0.00",
            "loadAverage5Min": "0.00",
            "loadAverage15Min": "0.00",
            "numPhysicalCpus": "1",
            "HyperThreadingStatus": "NA",
            "numCpuCores": "NA"
          },
          "operation": "update"
        }
</pre>
                <p>The <tt class="docutils literal">data.target</tt> information already existed in the geneos metadata.</p>
                <p>Example <cite>metadata.severity</cite> of a dataview cell:</p><pre class="literal-block" xml:space="preserve"><MadCap:conditionalText MadCap:conditions="Output.Null">
.. sourcecode:: json</MadCap:conditionalText>
        {
          "data": {
            "timestamp": "2015-08-10T13:30:16.170Z",
            "target": {
              "gateway": "g",
              "probe": "p",
              "managedEntity": "m",
              "type": "",
              "sampler": "t",
              "dataview": "t",
              "row": "r1",
              "column": "col3"
            },
            "severity": "WARNING",
            "active": true
          },
          "operation": "create"
        }
</pre>
                <p>Example <cite>metadata.severity</cite> of a headline:</p><pre class="literal-block" xml:space="preserve"><MadCap:conditionalText MadCap:conditions="Output.Null">
.. sourcecode:: json</MadCap:conditionalText>
        {
          "data": {
            "timestamp": "2015-08-10T13:30:16.170Z",
            "target": {
              "gateway": "g",
              "probe": "p",
              "managedEntity": "m",
              "type": "",
              "sampler": "t",
              "dataview": "t",
              "headline": "h1"
            },
            "severity": "OK",
            "active": true
          },
          "operation": "create"
        }
</pre>
                <p>This information can be used to filter the incoming data before publishing to streams.</p>
                <p>Following example shows how the user can filter incoming data from all Linux CPUs from Gateway <tt class="docutils literal">g</tt> into stream <tt class="docutils literal"><span class="pre">/streams/demo/geneos/cpu-linux</span></tt>. This also means that user has more control over what schema to apply for the incoming data. Especially, because some of the geneos plugins produce different data depending on the OS type.</p><pre class="literal-block" xml:space="preserve">
valo.transport.geneos.streams : [
        {
          stream: "/streams/demo/geneos/cpu-linux",
          topics: ["raw.table"],
          "target" : {
            "gateway" : "g",
            "filter" : {
              "osType" : "Linux",
              "pluginName" : "CPU"
            }
          },
          auto-config: {
            schema-path: ${valo.home}"/resources/geneos/plugin-unix-cpu-schema.json"
            repository: "ssr"
          }
        }
    ]
</pre>
                <div class="note">
                    <p class="first admonition-title">Note</p>
                    <p>One can filter by other (or all) elements in the data.target JSON node: <tt class="docutils literal">target.gateway</tt>, <tt class="docutils literal">target.probe</tt>, <tt class="docutils literal">target.managedEntity</tt>, <tt class="docutils literal">target.type</tt>, <tt class="docutils literal">target.sampler</tt>, <tt class="docutils literal">target.dataview</tt>, <tt class="docutils literal">target.filter.osType</tt> and <tt class="docutils literal">target.filter.pluginName</tt>.</p>
                </div>
                <p>Following example shows how the user can filter incoming data from all samplers and dataviews with names "Linux" and pluginName "cpu" into stream <tt class="docutils literal"><span class="pre">/streams/demo/geneos/linux-cpu-data</span></tt>.</p><pre class="literal-block" xml:space="preserve">
valo.transport.geneos.streams : [
    {
      stream: "/streams/demo/geneos/linux-cpu-data",
      topics: ["raw.table"],
      "target" : {
        "sampler" : "Linux",
        "dataview" : "Linux",
        "filter" : {
            "pluginName" : "cpu"
        }
      }
      auto-config: {
        schema-path: ${valo.home}"/resources/geneos/plugin-unix-cpu-schema.json"
        repository: "ssr"
      }
    }
]
</pre>
                <p>For geneos metadata, instead of <tt class="docutils literal">target.filter.osType</tt> and <tt class="docutils literal">target.filter.pluginName</tt>, we have either <tt class="docutils literal">target.row</tt> and <tt class="docutils literal">target.column</tt> or <tt class="docutils literal">target.headline</tt> parameters.</p>
                <p>Following example shows how the user can filter all incoming metadata.snooze from a particular managed entity and row into stream <tt class="docutils literal">/streams/demo/geneos/snooze</tt>.</p><pre class="literal-block" xml:space="preserve">
valo.transport.geneos.streams : [
    {
      stream: "/streams/demo/geneos/snooze",
      topics: ["metadata.snooze"],
      "target" : {
        "managedEntity" : "m",
        "row" : "row1"
      }
      auto-config: {
        schema-path: ${valo.home}"/resources/geneos/metadata-snooze-schema.json"
        taxonomy-path : ${valo.home}"/resources/geneos/metadata-snooze-taxonomy.json"
        repository: "ssr"
      }
    }
]
</pre>
                <p>Another example to demonstrate how the user can filter all incoming metadata.userAssignment from a particular probe, sampler and headline into stream <tt class="docutils literal">/streams/demo/geneos/userassigned</tt>.</p>
                <div class="system-message"><pre class="literal-block" xml:space="preserve">
valo.transport.geneos.streams : [
    {
      stream: "/streams/demo/geneos/userassigned",
      topics: ["metadata.userAssignment"],
      "target" : {
        "probe" : "p",
        "sampler" : "s",
        "headline" : "h1"
      }
      auto-config: {
        schema-path: ${valo.home}"/resources/geneos/metadata-userassignment-schema.json"
        taxonomy-path : ${valo.home}"/resources/geneos/metadata-userassignment-taxonomy.json"
        repository: "ssr"
      }
    }
]
						</pre>
                </div>
            </div>
        </div>
    </body>
</html>
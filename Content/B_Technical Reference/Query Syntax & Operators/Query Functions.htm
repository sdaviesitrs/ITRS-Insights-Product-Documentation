<?xml version="1.0" encoding="utf-8"?>
<html MadCap:lastBlockDepth="8" MadCap:lastHeight="12896" MadCap:lastWidth="1037" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Analysing Data</title>
        <style type="text/css">
/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 7614 2013-02-21 15:55:51Z milde $
:Copyright: This stylesheet has been placed in the public domain.
Default cascading style sheet for the HTML output of Docutils.
See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/
/* used to remove borders from tables and images */
.borderless,
table.borderless td,
table.borderless th
{
	border: 0;
}
table.borderless td,
table.borderless th
{
	/* Override padding for "table.docutils td" with "! important".
 The right padding separates the table cells. */
	padding: 0 0.5em 0 0 !important;
}
.first
{
	/* Override more specific margin styles with "! important". */
	margin-top: 0 !important;
}
.last,
.with-subtitle
{
	margin-bottom: 0 !important;
}
.hidden
{
	display: none;
}
a.toc-backref
{
	text-decoration: none;
	color: black;
}
blockquote.epigraph
{
	margin: 2em 5em;
}
dl.docutils dd
{
	margin-bottom: 0.5em;
}
object[type="image/svg+xml"],
object[type="application/x-shockwave-flash"]
{
	overflow: hidden;
}
/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
 font-weight: bold }
*/
div.abstract
{
	margin: 2em 5em;
}
div.abstract p.topic-title
{
	font-weight: bold;
	text-align: center;
}
div.admonition,
div.attention,
div.caution,
div.danger,
div.error,
div.hint,
div.important,
div.note,
div.tip,
div.warning
{
	margin: 2em;
	border: medium outset;
	padding: 1em;
}
div.admonition p.admonition-title,
div.hint p.admonition-title,
div.important p.admonition-title,
div.note p.admonition-title,
div.tip p.admonition-title
{
	font-weight: bold;
	font-family: sans-serif;
}
div.attention p.admonition-title,
div.caution p.admonition-title,
div.danger p.admonition-title,
div.error p.admonition-title,
div.warning p.admonition-title,
.code .error
{
	color: red;
	font-weight: bold;
	font-family: sans-serif;
}
/* Uncomment (and remove this text!) to get reduced vertical space in
 compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
 margin-bottom: 0.5em }
div.compound .compound-last, div.compound .compound-middle {
 margin-top: 0.5em }
*/
div.dedication
{
	margin: 2em 5em;
	text-align: center;
	font-style: italic;
}
div.dedication p.topic-title
{
	font-weight: bold;
	font-style: normal;
}
div.figure
{
	margin-left: 2em;
	margin-right: 2em;
}
div.footer,
div.header
{
	clear: both;
	font-size: smaller;
}
div.line-block
{
	display: block;
	margin-top: 1em;
	margin-bottom: 1em;
}
div.line-block div.line-block
{
	margin-top: 0;
	margin-bottom: 0;
	margin-left: 1.5em;
}
div.sidebar
{
	margin: 0 0 0.5em 1em;
	border: medium outset;
	padding: 1em;
	background-color: #ffffee;
	width: 40%;
	float: right;
	clear: right;
}
div.sidebar p.rubric
{
	font-family: sans-serif;
	font-size: medium;
}
div.system-messages
{
	margin: 5em;
}
div.system-messages h1
{
	color: red;
}
div.system-message
{
	border: medium outset;
	padding: 1em;
}
div.system-message p.system-message-title
{
	color: red;
	font-weight: bold;
}
div.topic
{
	margin: 2em;
}
h1.section-subtitle,
h2.section-subtitle,
h3.section-subtitle,
h4.section-subtitle,
h5.section-subtitle,
h6.section-subtitle
{
	margin-top: 0.4em;
}
h1.title
{
	text-align: center;
}
h2.subtitle
{
	text-align: center;
}
hr.docutils
{
	width: 75%;
}
img.align-left,
.figure.align-left,
object.align-left
{
	clear: left;
	float: left;
	margin-right: 1em;
}
img.align-right,
.figure.align-right,
object.align-right
{
	clear: right;
	float: right;
	margin-left: 1em;
}
img.align-center,
.figure.align-center,
object.align-center
{
	display: block;
	margin-left: auto;
	margin-right: auto;
}
.align-left
{
	text-align: left;
}
.align-center
{
	clear: both;
	text-align: center;
}
.align-right
{
	text-align: right;
}
/* reset inner alignment in figures */
div.align-right
{
	text-align: inherit;
}
/* div.align-center * { */
/* text-align: left } */
ol.simple,
ul.simple
{
	margin-bottom: 1em;
}
ol.arabic
{
	list-style: decimal;
}
ol.loweralpha
{
	list-style: lower-alpha;
}
ol.upperalpha
{
	list-style: upper-alpha;
}
ol.lowerroman
{
	list-style: lower-roman;
}
ol.upperroman
{
	list-style: upper-roman;
}
p.attribution
{
	text-align: right;
	margin-left: 50%;
}
p.caption
{
	font-style: italic;
}
p.credits
{
	font-style: italic;
	font-size: smaller;
}
p.label
{
	white-space: nowrap;
}
p.rubric
{
	font-weight: bold;
	font-size: larger;
	color: maroon;
	text-align: center;
}
p.sidebar-title
{
	font-family: sans-serif;
	font-weight: bold;
	font-size: larger;
}
p.sidebar-subtitle
{
	font-family: sans-serif;
	font-weight: bold;
}
p.topic-title
{
	font-weight: bold;
}
pre.address
{
	margin-bottom: 0;
	margin-top: 0;
	font: inherit;
}
pre.literal-block,
pre.doctest-block,
pre.math,
pre.code
{
	margin-left: 2em;
	margin-right: 2em;
}
pre.code .ln
{
	color: grey;
}
/* line numbers */
pre.code,
code
{
	background-color: #eeeeee;
}
pre.code .comment,
code .comment
{
	color: #5C6576;
}
pre.code .keyword,
code .keyword
{
	color: #3B0D06;
	font-weight: bold;
}
pre.code .literal.string,
code .literal.string
{
	color: #0C5404;
}
pre.code .name.builtin,
code .name.builtin
{
	color: #352B84;
}
pre.code .deleted,
code .deleted
{
	background-color: #DEB0A1;
}
pre.code .inserted,
code .inserted
{
	background-color: #A3D289;
}
span.classifier
{
	font-family: sans-serif;
	font-style: oblique;
}
span.classifier-delimiter
{
	font-family: sans-serif;
	font-weight: bold;
}
span.interpreted
{
	font-family: sans-serif;
}
span.option
{
	white-space: nowrap;
}
span.pre
{
	white-space: pre;
}
span.problematic
{
	color: red;
}
span.section-subtitle
{
	/* font-size relative to parent (h1..h6 element) */
	font-size: 80%;
}
table.citation
{
	border-left: solid 1px gray;
	margin-left: 1px;
}
table.docinfo
{
	margin: 2em 4em;
}
table.docutils
{
	margin-top: 0.5em;
	margin-bottom: 0.5em;
}
table.footnote
{
	border-left: solid 1px black;
	margin-left: 1px;
}
table.docutils td,
table.docutils th,
table.docinfo td,
table.docinfo th
{
	padding-left: 0.5em;
	padding-right: 0.5em;
	vertical-align: top;
}
table.docutils th.field-name,
table.docinfo th.docinfo-name
{
	font-weight: bold;
	text-align: left;
	white-space: nowrap;
	padding-left: 0;
}
/* "booktabs" style (no vertical lines) */
table.docutils.booktabs
{
	border: 0px;
	border-top: 2px solid;
	border-bottom: 2px solid;
	border-collapse: collapse;
}
table.docutils.booktabs *
{
	border: 0px;
}
table.docutils.booktabs th
{
	border-bottom: thin solid;
	text-align: left;
}
h1 tt.docutils,
h2 tt.docutils,
h3 tt.docutils,
h4 tt.docutils,
h5 tt.docutils,
h6 tt.docutils
{
	font-size: 100%;
}
ul.auto-toc
{
	list-style-type: none;
}

</style>
    </head>
    <body>
        <h1>Query&#160;Functions</h1>
        <p>Insights provides you with a significant number of functions out of the
box. These functions can be used within a query
to perform complex mathematical and analytical operations on your data.
See <MadCap:xref href="../../C_User Guides/Query, Search &amp; Transform Data User Guide.htm">Query,&#160;Search&#160;and Transforming Data User Guide</MadCap:xref>.</p>
        <p>The complete list is:</p>
        <table border="1" class="docutils">
            <colgroup>
                <col width="27%" />
                <col width="19%" />
                <col width="54%" />
            </colgroup>
            <thead valign="bottom">
                <tr>
                    <th class="head">Function (Input)</th>
                    <th class="head">
                        <p class="first">Output</p>
                    </th>
                    <th class="head">Description</th>
                </tr>
            </thead>
            <tbody valign="top">
                <tr>
                    <td>
                        <p class="first"><a href="#id5"><MadCap:xref href="#abs">abs : absolute value</MadCap:xref></a>
                        </p>
                    </td>
                    <td>
                        <p class="first">Various</p>
                    </td>
                    <td>Returns the absolute value</td>
                </tr>
                <tr>
                    <td>acos(<em>double</em>)</td>
                    <td>double</td>
                    <td>arccosine</td>
                </tr>
                <tr>
                    <td>
                        <p>
                            <MadCap:xref href="../Algorithms/Anomaly.htm">Anomaly</MadCap:xref>
                        </p>
                    </td>
                    <td>
                        <p class="first"><a href="#id11"><MadCap:xref href="../Algorithms/Anomaly.htm">Anomaly</MadCap:xref></a>
                        </p>
                    </td>
                    <td>Identification of events which do not conform to the pattern set by other events in a dataset.</td>
                </tr>
                <tr>
                    <td>asin(<em>double</em>)</td>
                    <td>double</td>
                    <td>arcsine</td>
                </tr>
                <tr>
                    <td>atan(<em>double</em>)</td>
                    <td>double</td>
                    <td>arctangent</td>
                </tr>
                <tr>
                    <td>atan2(<em>double</em>, <em>double</em>)| double</td>
                    <td>double</td>
                    <td>arctangent with 2 arguments</td>
                </tr>
                <tr>
                    <td>avg(double)</td>
                    <td>double</td>
                    <td>average</td>
                </tr>
                <tr>
                    <td>
                        <p>
                            <MadCap:xref href="../Algorithms/Bivar.htm">Bivar</MadCap:xref>
                        </p>
                    </td>
                    <td>
                        <p class="first"><a href="#id15"><MadCap:xref href="../Algorithms/Bivar.htm">Bivar</MadCap:xref></a>
                        </p>
                    </td>
                    <td>Bivariate correlative statistics for use with 2 variables.</td>
                </tr>
                <tr>
                    <td>boundingBox(geoCircle)</td>
                    <td>geoRectangle</td>
                    <td>Returns geo rectangle that contains the original geo Circle</td>
                </tr>
                <tr>
                    <td>cbrt(double)</td>
                    <td>double</td>
                    <td>cubed root</td>
                </tr>
                <tr>
                    <td>ceil(double)</td>
                    <td>double</td>
                    <td>Ceiling function, returns the smallest natural number that is greater than or equal to the input</td>
                </tr>
                <tr>
                    <td>center(geoRectangle)</td>
                    <td>geoPoint</td>
                    <td>returns centre point of the geoRectangle</td>
                </tr>
                <tr>
                    <td>centerLatitude(geoCircle)</td>
                    <td>double</td>
                    <td>Gets the latitude of the centre of the circle in degrees</td>
                </tr>
                <tr>
                    <td>centerLongitude(geoCircle)</td>
                    <td>double</td>
                    <td>Gets the longitude of the centre of the circle in degrees</td>
                </tr>
                <tr>
                    <td>concat(string, string)</td>
                    <td>string</td>
                    <td>concatenation of 2 strings</td>
                </tr>
                <tr>
                    <td>
                        <p>
                            <MadCap:xref href="#contains">contains</MadCap:xref>
                        </p>
                    </td>
                    <td>boolean</td>
                    <td>returns true if the first input includes the second (follow link for more detail)</td>
                </tr>
                <tr>
                    <td>contributor(string)</td>
                    <td>contributor</td>
                    <td>Constructs a contributor object from a string</td>
                </tr>
                <tr>
                    <td>cos(double)</td>
                    <td>double</td>
                    <td>cosine</td>
                </tr>
                <tr>
                    <td>cosh(double)</td>
                    <td>double</td>
                    <td>hyperbolic cosine</td>
                </tr>
                <tr>
                    <td>count()</td>
                    <td>long</td>
                    <td>Increments a counter each time the function is called</td>
                </tr>
                <tr>
                    <td>countDistinct(string)</td>
                    <td>int</td>
                    <td>Counts the number of unique values</td>
                </tr>
                <tr>
                    <td>
                        <p>
                            <MadCap:xref href="#counter">counter</MadCap:xref>
                        </p>
                    </td>
                    <td>(value:string,count:double)</td>
                    <td>Counts the number of occurrences of unique values, like collections.</td>
                </tr>
                <tr>
                    <td>crossesDateLine(geoRectangle)</td>
                    <td>boolean</td>
                    <td>returns true if area in rectangle crosses international date line</td>
                </tr>
                <tr>
                    <td>date(string)</td>
                    <td>date</td>
                    <td>converts a string into date format</td>
                </tr>
                <tr>
                    <td>datetime(string)</td>
                    <td>date</td>
                    <td>
                        <p class="first">converts a string into schema format. See: <MadCap:xref href="../Schema Fields &amp; Types/Schema Types.htm">Schema Types</MadCap:xref></p>
                    </td>
                </tr>
                <tr>
                    <td>day(date or datetime)</td>
                    <td>integer</td>
                    <td>Returns day of the month from 1 to 31</td>
                </tr>
                <tr>
                    <td>dayOfWeek(date or datetime)</td>
                    <td>string</td>
                    <td>Returns day of the week</td>
                </tr>
                <tr>
                    <td>dayOfWeekValue(date or datetime)</td>
                    <td>integer</td>
                    <td>Returns day of the week as an integer where Monday is 1</td>
                </tr>
                <tr>
                    <td>dayOfYear(date or datetime)</td>
                    <td>int</td>
                    <td>Returns the day of the year since 1st January</td>
                </tr>
                <tr>
                    <td>days(duration)</td>
                    <td>long</td>
                    <td>Converts a duration into the number of days</td>
                </tr>
                <tr>
                    <td>diff(date or datetime , date or datetime)</td>
                    <td>duration</td>
                    <td>Difference between 2 dates/times as a duration</td>
                </tr>
                <tr>
                    <td>distance(geoPoint, geoPoint)</td>
                    <td>double</td>
                    <td>Distance between two geographical points in km, using Haversine and earth mean radius = 6371.0087714 Km</td>
                </tr>
                <tr>
                    <td>distanceDEG(geoPoint, geoPoint)</td>
                    <td>double</td>
                    <td>distance between 2 points in degrees</td>
                </tr>
                <tr>
                    <td>domain (email)</td>
                    <td>string</td>
                    <td>returns the domain name from an email address</td>
                </tr>
                <tr>
                    <td>duration(int, int, int, double)</td>
                    <td>duration</td>
                    <td>Calculates the duration based on the intput arguments (days, hours, minutes, seconds)</td>
                </tr>
                <tr>
                    <td>duration(string)</td>
                    <td>duration</td>
                    <td>converts duration in string format into duration type</td>
                </tr>
                <tr>
                    <td>
                        <p>
                            <MadCap:xref href="#EMA">EMA</MadCap:xref>
                        </p>
                    </td>
                    <td>double</td>
                    <td>exponential moving average</td>
                </tr>
                <tr>
                    <td>email(string)</td>
                    <td>email</td>
                    <td>converts string into an email</td>
                </tr>
                <tr>
                    <td>erf(double)</td>
                    <td>double</td>
                    <td>error function (aka Gauss error function)</td>
                </tr>
                <tr>
                    <td>erfc(double)</td>
                    <td>double</td>
                    <td>complementary error function</td>
                </tr>
                <tr>
                    <td>exp(double)</td>
                    <td>double</td>
                    <td>natural exponential function = ex where e is Euler's number</td>
                </tr>
                <tr>
                    <td>expml(double)</td>
                    <td>double</td>
                    <td>natural exponential function minus 1 = ex-1 where e is Euler's number</td>
                </tr>
                <tr>
                    <td>
                        <p>
                            <MadCap:xref href="#first">first</MadCap:xref>
                        </p>
                    </td>
                    <td>various</td>
                    <td>Returns the first of an ordered set (see link for more detail)</td>
                </tr>
                <tr>
                    <td>floor(double)</td>
                    <td>double</td>
                    <td>Floor function, returns the greatest natural number that is less than or equal to x</td>
                </tr>
                <tr>
                    <td>format(datetime, string)</td>
                    <td>string</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p>
                            <MadCap:xref href="#geoCircle">geoCircle</MadCap:xref>
                        </p>
                    </td>
                    <td>geoCircle</td>
                    <td>Creates a Geo circle the coordinates of its center and another point (click link for more detail)</td>
                </tr>
                <tr>
                    <td>
                        <p>
                            <MadCap:xref href="#geoPoint">geoPoint</MadCap:xref>
                        </p>
                    </td>
                    <td>geoPoint</td>
                    <td>Creates a geoPoint from string or longitude and latitude points</td>
                </tr>
                <tr>
                    <td>
                        <p>
                            <MadCap:xref href="#geoRectangle">geoRectangle</MadCap:xref>
                        </p>
                    </td>
                    <td>geoRectangle</td>
                    <td>Creates a geoRectangle from various parameters</td>
                </tr>
                <tr>
                    <td>getAuthority(uri)</td>
                    <td>string</td>
                    <td>Returns the decoded authority component of this URI</td>
                </tr>
                <tr>
                    <td>getFragment(uri)</td>
                    <td>string</td>
                    <td>Returns the decoded fragment component of this URI</td>
                </tr>
                <tr>
                    <td>getHost(uri)</td>
                    <td>string</td>
                    <td>Returns the host component of this URI</td>
                </tr>
                <tr>
                    <td>getPath(uri)</td>
                    <td>string</td>
                    <td>Returns the decoded path component of this URI</td>
                </tr>
                <tr>
                    <td>getPort(uri)</td>
                    <td>integer</td>
                    <td>Returns the port number of this URI</td>
                </tr>
                <tr>
                    <td>getQuery(uri)</td>
                    <td>string</td>
                    <td>Returns the decoded query component of this URI</td>
                </tr>
                <tr>
                    <td>getScheme(uri)</td>
                    <td>string</td>
                    <td>Returns the scheme component of this URI</td>
                </tr>
                <tr>
                    <td>getUserInfo(uri)</td>
                    <td>string</td>
                    <td>Returns the user-information component of this URI</td>
                </tr>
                <tr>
                    <td>height(geoRectangle)</td>
                    <td>double</td>
                    <td>Gets the height of the rectangle in degrees latitude</td>
                </tr>
                <tr>
                    <td>
                        <p>
                            <MadCap:xref href="../Algorithms/Histogram.htm">Histogram</MadCap:xref>
                        </p>
                    </td>
                    <td>&#160;</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>hour(datetime or time)</td>
                    <td>integer</td>
                    <td>Hour of the day</td>
                </tr>
                <tr>
                    <td>hours(duration)</td>
                    <td>long</td>
                    <td>Number of hours</td>
                </tr>
                <tr>
                    <td>hypot(double, double)</td>
                    <td>double</td>
                    <td>Returns hypotenuse; square root of the sum of the squares of the 2 inputs</td>
                </tr>
                <tr>
                    <td>I(boolean)</td>
                    <td>integer</td>
                    <td>The indicator function. Returns 1 if true, otherwise 0</td>
                </tr>
                <tr>
                    <td>
                        <p>&#160;</p>
                    </td>
                    <td>double</td>
                    <td>Iterated (Recursive) EMA Operator</td>
                </tr>
                <tr>
                    <td>ifNull(-type-, -type-)</td>
                    <td><em>-type-</em>
                    </td>
                    <td>if first input is null use the second value</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id37"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMicroTickFrequency">iMicroTickFrequency</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Average tick arrival over the given period</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id39"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMicroVolatility">iMicroVolatility</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Microscopic Volatility is computed as the norm of the microscopic derivative of the signal</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id41"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMovAverage">iMovAverage</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Moving Average for irregular time series</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id43"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMovDerivative">iMovDerivative</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Moving Derivative for irregular time series</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id45"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMovDifferential">iMovDifferential</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Moving Differential for irregular time series</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id47"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMovKurtosis">iMovKurtosis</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Moving Kurtosis for irregular time series</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id49"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMovNorm">iMovNorm</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Moving Norm for irregular time series</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id51"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMovOscilator">iMovOscilator</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Classical oscilator that computes the difference between the current value and a simple EMA operator defined for a given period.</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id53"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMovSkewness">iMovSkewness</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Returns the amount of skewness for an irregular time series</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id55"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMovStandardDeviation">iMovStandardDeviation</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Moving Standard Deviation for irregular time series</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id57"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMovVariance">iMovVariance</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Moving Variance for irregular time series</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id59"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMovOscilator">iMovOscilator</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Moving Oscilator over an irregular time series</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id61"><MadCap:xref href="../Algorithms/Irregular Time Series Functions.htm#iMovZ">iMovZ</MadCap:xref></a>
                        </p>
                    </td>
                    <td>double</td>
                    <td>Moving Standardized time series (average 0, var 1)</td>
                </tr>
                <tr>
                    <td>inetAddress(string)</td>
                    <td>ip</td>
                    <td>Converts a string into an inet address</td>
                </tr>
                <tr>
                    <td>inetAddressByName(string)</td>
                    <td>ip</td>
                    <td>Creates an inet address based on a host name</td>
                </tr>
                <tr>
                    <td>isAbsolute(uri)</td>
                    <td>boolean</td>
                    <td>Returns true is the URI is absolutel</td>
                </tr>
                <tr>
                    <td>isAfter(date, date) or (datetime, datetime)</td>
                    <td>boolean</td>
                    <td>Returns true if first time point is after the second</td>
                </tr>
                <tr>
                    <td>isBefore(date, date) or (datetime, datetime)</td>
                    <td>boolean</td>
                    <td>Returns true if first time point is before second)</td>
                </tr>
                <tr>
                    <td>isGlobalMulticastAddress(ip)</td>
                    <td>boolean</td>
                    <td>Returns true if the multicast address has global scope</td>
                </tr>
                <tr>
                    <td>isInfinity(double)</td>
                    <td>boolean</td>
                    <td>Checks if the double value is Infinity</td>
                </tr>
                <tr>
                    <td>isIPv4(ip)</td>
                    <td>boolean</td>
                    <td>Returns true if the address is an IPv4</td>
                </tr>
                <tr>
                    <td>isIPv4Mapped(ip)</td>
                    <td>boolean</td>
                    <td>Returns true if the address is an IPv4 mapped as IPv6</td>
                </tr>
                <tr>
                    <td>isIPv6(ip)</td>
                    <td>boolean</td>
                    <td>Returns true if the address is an IPv6</td>
                </tr>
                <tr>
                    <td>isLeapYear(date, or datetime)</td>
                    <td>boolean</td>
                    <td>Returns true if timepoint is within a leap year</td>
                </tr>
                <tr>
                    <td>isLinkLocalMulticastAddress(ip)</td>
                    <td>boolean</td>
                    <td>Returns true if the multicast address has link scope</td>
                </tr>
                <tr>
                    <td>isLoopbackAddress(ip)</td>
                    <td>boolean</td>
                    <td>Returns true if the address is an IPv4 or IPv6 loopback address</td>
                </tr>
                <tr>
                    <td>isMulticastAddress(ip)</td>
                    <td>boolean</td>
                    <td>Returns true if the address is multicast</td>
                </tr>
                <tr>
                    <td>isNan(double)</td>
                    <td>boolean</td>
                    <td>Checks if the double value is NaN (Not a Number)</td>
                </tr>
                <tr>
                    <td>isNegInfinity(double)</td>
                    <td>boolean</td>
                    <td>Checks if the double value is -Infinity</td>
                </tr>
                <tr>
                    <td>isNodeLocalMulticastAddress(ip)</td>
                    <td>boolean</td>
                    <td>Returns true if the multicast address has node scope</td>
                </tr>
                <tr>
                    <td>isNull(-type-)</td>
                    <td>boolean</td>
                    <td>returns true if value is null</td>
                </tr>
                <tr>
                    <td>isOpaque(uri)</td>
                    <td>boolean</td>
                    <td>returns true if uri is opaque</td>
                </tr>
                <tr>
                    <td>isOrganisationalMulticastAddress(ip)</td>
                    <td>boolean</td>
                    <td>Returns true if the multicast address has organization scope</td>
                </tr>
                <tr>
                    <td>isPosInfinity(double)</td>
                    <td>boolean</td>
                    <td>Checks if the double value is +Infinity</td>
                </tr>
                <tr>
                    <td>isSiteMulticastAddress(ip)</td>
                    <td>boolean</td>
                    <td>Returns true if the multicast address has site scope</td>
                </tr>
                <tr>
                    <td>kind(ip)</td>
                    <td>string</td>
                    <td>Returns a string with the type of address. "IPv4" or "IPv6"</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id63"><MadCap:xref href="#Last">Last</MadCap:xref></a>
                        </p>
                    </td>
                    <td>-type-</td>
                    <td>Returns the last in an ordered set (see link for more detail)</td>
                </tr>
                <tr>
                    <td>latitude(geoPoint)</td>
                    <td>double</td>
                    <td>returns the latitude value of a given point in degrees</td>
                </tr>
                <tr>
                    <td>lengthOfMonth(date or datetime)</td>
                    <td>integer</td>
                    <td>Returns the number of days in the month of given date</td>
                </tr>
                <tr>
                    <td>lengthOfYear(date or datetime)</td>
                    <td>integer</td>
                    <td>Returns the number of days in the year of given date (365 or 366)</td>
                </tr>
                <tr>
                    <td>log(double)</td>
                    <td>double</td>
                    <td>Returns the natural logarithm (base e) of the input</td>
                </tr>
                <tr>
                    <td>log10(double)</td>
                    <td>double</td>
                    <td>returns the common logarithm (base 10) of input</td>
                </tr>
                <tr>
                    <td>log1p(double)</td>
                    <td>double</td>
                    <td>Returns the natural logarithm of the the argument plus 1</td>
                </tr>
                <tr>
                    <td>longitude(geoPoint)</td>
                    <td>double</td>
                    <td>returns the longitude value of a given point in degrees</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id65"><MadCap:xref href="#max">max</MadCap:xref></a>
                        </p>
                    </td>
                    <td>integer</td>
                    <td>Returns the largest argument for each payload</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id67"><MadCap:xref href="#Max">Max</MadCap:xref></a>
                        </p>
                    </td>
                    <td>-type-</td>
                    <td>Aggregates payloads into a single result</td>
                </tr>
                <tr>
                    <td>micros(duration)</td>
                    <td>long</td>
                    <td>Converts duration into microseconds</td>
                </tr>
                <tr>
                    <td>millis(duration)</td>
                    <td>long</td>
                    <td>Converts duration into milliseconds</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id69"><MadCap:xref href="#min">min</MadCap:xref></a>
                        </p>
                    </td>
                    <td>integer</td>
                    <td>Returns the smallest argument for each payload</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id71"><MadCap:xref href="#Min">Min</MadCap:xref></a>
                        </p>
                    </td>
                    <td>-type-</td>
                    <td>Aggregates payloads into a single result</td>
                </tr>
                <tr>
                    <td>minus(date, duration) or (datetime, duration)</td>
                    <td>datetime</td>
                    <td>returns the date and time of the input date minus the duration</td>
                </tr>
                <tr>
                    <td>minus(time , duration)</td>
                    <td>time</td>
                    <td>returns the time of the input time minus the duration</td>
                </tr>
                <tr>
                    <td>minute(time) or (datetime)</td>
                    <td>integer</td>
                    <td>returns the minutes digits in the time specified</td>
                </tr>
                <tr>
                    <td>minuteofDay(time) or (datetime)</td>
                    <td>integer</td>
                    <td>minute in the day of the specified time</td>
                </tr>
                <tr>
                    <td>minutes(duration)</td>
                    <td>long</td>
                    <td>duration converted into minutes</td>
                </tr>
                <tr>
                    <td>month(time) or (datetime)</td>
                    <td>integer</td>
                    <td>month of the year as an integer where Jan =1, Feb = 2,....</td>
                </tr>
                <tr>
                    <td>multicastKind(ip)</td>
                    <td>string</td>
                    <td>Returns a string with the type of multicast address [Global, Link, Node, Organisation, Site or Unknown</td>
                </tr>
                <tr>
                    <td>nameOfMonth(date) or (datetime)</td>
                    <td>string</td>
                    <td>Returns the name of the month, as a string</td>
                </tr>
                <tr>
                    <td>nano(datetime) or (time)</td>
                    <td>integer</td>
                    <td>Gets the fractional second in nano units</td>
                </tr>
                <tr>
                    <td>nanos(duration)</td>
                    <td>long</td>
                    <td>converting a duration into nanoseconds</td>
                </tr>
                <tr>
                    <td>ordinal(int, int, int, int)</td>
                    <td>date</td>
                    <td>Calculates a date based on a ordinal position where arguments are (position, day of week, month, year)</td>
                </tr>
                <tr>
                    <td>ordinal(int, int, date)</td>
                    <td>date</td>
                    <td>Calculates a date based on a ordinal position and within the month and year given by the last parameter where arguments are (position, day of the week, date in the month and year)</td>
                </tr>
                <tr>
                    <td>plus(date, duration) or (datetime, duration)</td>
                    <td>datetime</td>
                    <td>returns what the datetime would be after the duration if starting at the input time</td>
                </tr>
                <tr>
                    <td>plus(time, duration)</td>
                    <td>time</td>
                    <td>returns what the time would be after the duration if starting at the input time</td>
                </tr>
                <tr>
                    <td>pointOnBearing(geoPoint, double, double)</td>
                    <td>geoPoint</td>
                    <td>Returns location as reported at a distance (2nd argument) and bearing (3rd argument) from a known point (1st argument)</td>
                </tr>
                <tr>
                    <td>pow(double, double)</td>
                    <td>double</td>
                    <td>returns the value of the first input to the power of the second</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id73"><MadCap:xref href="#prefix">prefix</MadCap:xref></a>
                        </p>
                    </td>
                    <td>boolean</td>
                    <td>Returns true if the 1st string is prefixed by the specified (2nd) character sequence</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id75"><MadCap:xref href="../Algorithms/Quantiles.htm">Quantiles</MadCap:xref></a>
                        </p>
                    </td>
                    <td>sequence</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>radiusDEG (geoCircle)</td>
                    <td>double</td>
                    <td>radius of the geo circle in degrees</td>
                </tr>
                <tr>
                    <td>radiusKM (geoCircle)</td>
                    <td>double</td>
                    <td>radius of the geo circle in kilometres</td>
                </tr>
                <tr>
                    <td>relate(geoPoint, geoCircle) or (geoPoint, geoRectangle)</td>
                    <td>String{"Contains" or "Disjoint" or "Intersects" or "Within"}</td>
                    <td>returns 1 of 4 options of how the point relates to the geo shape</td>
                </tr>
                <tr>
                    <td>search(string)</td>
                    <td>boolean</td>
                    <td>Support for fuzzy search over all string fields in a payload</td>
                </tr>
                <tr>
                    <td>second(datetime) or (time)</td>
                    <td>int</td>
                    <td>returns the second field from the time</td>
                </tr>
                <tr>
                    <td>secondOfDay(datetime) or (time)</td>
                    <td>int</td>
                    <td>returns the number of seconds since the previous midnight</td>
                </tr>
                <tr>
                    <td>seconds(duration)</td>
                    <td>long</td>
                    <td>converts duration into seconds</td>
                </tr>
                <tr>
                    <td>sin(double)</td>
                    <td>double</td>
                    <td>sine</td>
                </tr>
                <tr>
                    <td>sinh(double)</td>
                    <td>double</td>
                    <td>hyperbolic sine function</td>
                </tr>
                <tr>
                    <td>sqrt(double)</td>
                    <td>double</td>
                    <td>Square root</td>
                </tr>
                <tr>
                    <td>startOfHour(datetime) or (time)</td>
                    <td>datetime or time</td>
                    <td>Strips minute, second and sub-second information from the date time</td>
                </tr>
                <tr>
                    <td>startOfMinute(datetime) or (time)</td>
                    <td>datetime or time</td>
                    <td>Strips second and sub-second information from the date time</td>
                </tr>
                <tr>
                    <td>startOfSecond(datetime) or (time)</td>
                    <td>datetime or time</td>
                    <td>Strips sub-second information from the date time</td>
                </tr>
                <tr>
                    <td>
                        <p class="first"><a href="#id77"><MadCap:xref href="#sum">sum</MadCap:xref></a>
                        </p>
                    </td>
                    <td>long</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p class="first">sum</p>
                    </td>
                    <td>double</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>tan(double)</td>
                    <td>double</td>
                    <td>tangent</td>
                </tr>
                <tr>
                    <td>tanh(double)</td>
                    <td>double</td>
                    <td>hyperbolic tangent</td>
                </tr>
                <tr>
                    <td>time(<em>string</em>)</td>
                    <td>time</td>
                    <td>Constructs a time object from a string</td>
                </tr>
                <tr>
                    <td>toBool(-type-)</td>
                    <td>boolean</td>
                    <td>converts integer, double, long, short, byte or string to boolean</td>
                </tr>
                <tr>
                    <td>toByte(-type-)</td>
                    <td>byte</td>
                    <td>converts integer, double, long, short, boolean or string to byte</td>
                </tr>
                <tr>
                    <td>toDate(datetime)</td>
                    <td>date</td>
                    <td>converts datetime to date</td>
                </tr>
                <tr>
                    <td>toDateTime(date)</td>
                    <td>datetime</td>
                    <td>converts date to datetime, making the time the earliest possible (e.g 0:00:00...)</td>
                </tr>
                <tr>
                    <td>toDegrees(double)</td>
                    <td>double</td>
                    <td>converts radians to degrees</td>
                </tr>
                <tr>
                    <td>toDouble(-type-)</td>
                    <td>double</td>
                    <td>converts a long, integer, short, byte, boolean or string to a double</td>
                </tr>
                <tr>
                    <td>toInt(-type-)</td>
                    <td>integer</td>
                    <td>converts a long, double, short, byte, boolean or string to an integer</td>
                </tr>
                <tr>
                    <td>toLong(-type-)</td>
                    <td>long</td>
                    <td>converts a double, integer, short, byte, boolean or string to a long</td>
                </tr>
                <tr>
                    <td>toLower(string)</td>
                    <td>string</td>
                    <td>converts string to lower case</td>
                </tr>
                <tr>
                    <td>toRadians(double)</td>
                    <td>double</td>
                    <td>converts degrees to radians</td>
                </tr>
                <tr>
                    <td>toShort(-type-)</td>
                    <td>short</td>
                    <td>converts a double, integer, long, byte, boolean or string to a short</td>
                </tr>
                <tr>
                    <td>toString(uuid)</td>
                    <td>string</td>
                    <td>Converts a UUID to String</td>
                </tr>
                <tr>
                    <td>toTime(datetime)</td>
                    <td>time</td>
                    <td>converts datetime into time</td>
                </tr>
                <tr>
                    <td>toUpper(string)</td>
                    <td>string</td>
                    <td>converts string to upppercase</td>
                </tr>
                <tr>
                    <td>
                        <p class="first">
                            <MadCap:xref href="../Algorithms/Univar.htm">Univar</MadCap:xref>
                        </p>
                    </td>
                    <td>&#160;</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>uri(string)</td>
                    <td>uri</td>
                    <td>converts string to uri</td>
                </tr>
                <tr>
                    <td>utcDate()</td>
                    <td>date</td>
                    <td>Returns the current date at UTC</td>
                </tr>
                <tr>
                    <td>utcNow()</td>
                    <td>datetime</td>
                    <td>returns current date and time at UTC</td>
                </tr>
                <tr>
                    <td>utcTomorrow()</td>
                    <td>date</td>
                    <td>returns the date one day after the current date at UTC</td>
                </tr>
                <tr>
                    <td>utcYesterday()</td>
                    <td>date</td>
                    <td>returns the date one day before the current date at UTC</td>
                </tr>
                <tr>
                    <td>uuid(string)</td>
                    <td>uuid</td>
                    <td>converts a string to a uudi</td>
                </tr>
                <tr>
                    <td>varient(uuid)</td>
                    <td>integer</td>
                    <td>The variant number describing the layout of the UUID</td>
                </tr>
                <tr>
                    <td>version(uuid)</td>
                    <td>integer</td>
                    <td>The version number describing how this UUID was generated</td>
                </tr>
                <tr>
                    <td>weekOfMonth(date) or (datetime)</td>
                    <td>integer</td>
                    <td>returns the week of the month</td>
                </tr>
                <tr>
                    <td>weekOfYear(date) or (datetime)</td>
                    <td>integer</td>
                    <td>returns the week of the year</td>
                </tr>
                <tr>
                    <td>width(geoRectangle)</td>
                    <td>double</td>
                    <td>Gets the width of the rectangle in degrees longitude</td>
                </tr>
                <tr>
                    <td>year(date) or (datetime)</td>
                    <td>integer</td>
                    <td>returns the year of the date input</td>
                </tr>
            </tbody>
        </table>
        <h2><a name="abs"></a>abs: absolute value</h2>
        <p>Returns the absolute value of the input</p>
        <table border="1" class="docutils">
            <colgroup>
                <col width="48%" />
                <col width="52%" />
            </colgroup>
            <thead valign="bottom">
                <tr>
                    <th class="head">Input</th>
                    <th class="head">Output</th>
                </tr>
            </thead>
            <tbody valign="top">
                <tr>
                    <td>double</td>
                    <td>double</td>
                </tr>
                <tr>
                    <td>long</td>
                    <td>long</td>
                </tr>
                <tr>
                    <td>integer</td>
                    <td>integer</td>
                </tr>
                <tr>
                    <td>short</td>
                    <td>integer</td>
                </tr>
                <tr>
                    <td>byte</td>
                    <td>integer</td>
                </tr>
            </tbody>
        </table>
        <h2><a name="contains"></a>contains</h2>
        <table border="1" class="docutils">
            <colgroup>
                <col width="24%" />
                <col width="12%" />
                <col width="64%" />
            </colgroup>
            <thead valign="bottom">
                <tr>
                    <th class="head">Input</th>
                    <th class="head">Output</th>
                    <th class="head">Explanation</th>
                </tr>
            </thead>
            <tbody valign="top">
                <tr>
                    <td>(string, string)</td>
                    <td>boolean</td>
                    <td>True if the first string contains the character sequence of the second</td>
                </tr>
                <tr>
                    <td>(geoPoint, geoCircle)</td>
                    <td>boolean</td>
                    <td>True if the geo circle contains the geoPoint</td>
                </tr>
                <tr>
                    <td>(geoPoint, geoRectangle)</td>
                    <td>boolean</td>
                    <td>True if the geo rectangle contains the geoPoint</td>
                </tr>
            </tbody>
        </table>
        <h2><a name="counter"></a>counter</h2>
        <p>Counts the number of occurrences of unique values. Returns all the
values seen along with their counts (a histogram essentially).</p>
        <p>Format: <tt class="docutils literal"><span class="pre">counter()(value:string,count:long)</span></tt></p>
        <div class="section" id="ema">
            <h2><a name="EMA"></a>EMA</h2>
            <p>Exponential Moving Average with next point interpolation</p>
            <p>Format: <tt class="docutils literal"><span class="pre">EMA(period)(timestamp,</span> value)</tt></p>
            <div class="section" id="parameters">
                <h2><a name="Parameters"></a>Parameters</h2>
                <table border="1" class="docutils">
                    <colgroup>
                        <col width="16%" />
                        <col width="15%" />
                        <col width="69%" />
                    </colgroup>
                    <thead valign="bottom">
                        <tr>
                            <th class="head"><strong>Name</strong>
                            </th>
                            <th class="head"><strong>Type</strong>
                            </th>
                            <th class="head"><strong>Comments</strong>
                            </th>
                        </tr>
                    </thead>
                    <tbody valign="top">
                        <tr>
                            <td>period</td>
                            <td>double</td>
                            <td>Range of the operator in units of time</td>
                        </tr>
                        <tr>
                            <td>timestamp</td>
                            <td>datetime</td>
                            <td>Timestamp associated with the point being processed.</td>
                        </tr>
                        <tr>
                            <td>value</td>
                            <td>double</td>
                            <td>value of the time series at the given timestamp</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <h2><a name="first"></a>first</h2>
        <p>Returns the first in an ordered set.</p>
        <h2><a name="format"></a>format</h2>
        <p>Formats datetime into a string</p>
        <h2><a name="Form"></a>Form: </h2>
        <div class="system-message">
            <p><tt class="docutils literal">format(_datetime_, format)</tt>
            </p>
        </div>
        <p>Where format is a string of one of the following</p>
        <table border="1" class="docutils">
            <colgroup>
                <col width="100%" />
            </colgroup>
            <thead valign="bottom">
                <tr>
                    <th class="head"><strong>Supported Formats</strong>
                    </th>
                </tr>
            </thead>
            <tbody valign="top">
                <tr>
                    <td>BASIC_ISO_DATE</td>
                </tr>
                <tr>
                    <td>ISO_DATE</td>
                </tr>
                <tr>
                    <td>ISO_DATE_TIME</td>
                </tr>
                <tr>
                    <td>ISO_INSTANT</td>
                </tr>
                <tr>
                    <td>ISO_LOCAL_DATE</td>
                </tr>
                <tr>
                    <td>ISO_LOCAL_DATE_TIME</td>
                </tr>
                <tr>
                    <td>ISO_LOCAL_TIME</td>
                </tr>
                <tr>
                    <td>ISO_OFFSET_DATE</td>
                </tr>
                <tr>
                    <td>ISO_OFFSET_DATE_TIME</td>
                </tr>
                <tr>
                    <td>ISO_OFFSET_TIME</td>
                </tr>
                <tr>
                    <td>ISO_ORDINAL_DATE</td>
                </tr>
                <tr>
                    <td>ISO_TIME</td>
                </tr>
                <tr>
                    <td>ISO_WEEK_DATE</td>
                </tr>
                <tr>
                    <td>ISO_ZONED_DATE_TIME</td>
                </tr>
            </tbody>
        </table>
        <h2><a name="geoCircle"></a>geoCircle</h2>
        <p>Creates a Geo circle the coordinates of its center and another point</p>
        <table border="1" class="docutils">
            <colgroup>
                <col width="17%" />
                <col width="8%" />
                <col width="75%" />
            </colgroup>
            <thead valign="bottom">
                <tr>
                    <th class="head">Input</th>
                    <th class="head">Output</th>
                    <th class="head">Explanation</th>
                </tr>
            </thead>
            <tbody valign="top">
                <tr>
                    <td>(geoPoint, geoPoint)</td>
                    <td>geoCircle</td>
                    <td>Creates a Geo circle the coordinates of its centre the first point and a point on it circumference set by the second</td>
                </tr>
                <tr>
                    <td>(geoPoint, double)</td>
                    <td>geoCircle</td>
                    <td>Creates a Geo circle the coordinates of its centre the first point and a radius of the second argument in km</td>
                </tr>
                <tr>
                    <td>(double, double, double)</td>
                    <td>geoCircle</td>
                    <td>Creates a Geo circle with its centre at longitude of the first argument, latitude the second argument and radius the third</td>
                </tr>
                <tr>
                    <td>(string)</td>
                    <td>geoCircle</td>
                    <td>Creates a Geo circle using a string of format [38.898648N 77.037692W 10.0]</td>
                </tr>
            </tbody>
        </table>
        <h2><a name="geoPoint"></a>geoPoint</h2>
        <table border="1" class="docutils">
            <colgroup>
                <col width="19%" />
                <col width="13%" />
                <col width="68%" />
            </colgroup>
            <thead valign="bottom">
                <tr>
                    <th class="head">Input</th>
                    <th class="head">Output</th>
                    <th class="head">Explanation</th>
                </tr>
            </thead>
            <tbody valign="top">
                <tr>
                    <td>(double, double)</td>
                    <td>geoPoint</td>
                    <td>Creates a Geo Point by longitude and latitude</td>
                </tr>
                <tr>
                    <td>(string)</td>
                    <td>geoPoint</td>
                    <td>Creates a Geo Point by passing a string like [28.898648N 77.037692W]</td>
                </tr>
            </tbody>
        </table>
        <h2><a name="geoRectangle"></a>geoRectangle</h2>
        <p>Creates a geoRectangle from various parameters</p>
        <table border="1" class="docutils">
            <colgroup>
                <col width="18%" />
                <col width="8%" />
                <col width="74%" />
            </colgroup>
            <thead valign="bottom">
                <tr>
                    <th class="head">Input</th>
                    <th class="head">Output</th>
                    <th class="head">Explanation</th>
                </tr>
            </thead>
            <tbody valign="top">
                <tr>
                    <td>(string)</td>
                    <td>geoRectangle</td>
                    <td>reates a Geo Rectangle by passing a string like [28.898648N 77.037692W 38.898648N 67.037692W]</td>
                </tr>
                <tr>
                    <td>(double, double, double, double)</td>
                    <td>geoRectangle</td>
                    <td>Creates a Geo Rectangle by specifying all four coordinates in the order longditude min, latitude min, longditude max and latitude max</td>
                </tr>
                <tr>
                    <td>(geoPoint, geoPoint)</td>
                    <td>geoRectangle</td>
                    <td>Creates a Geo Rectangle by specifying two opposite corners where the first arguement is the lower left corner and the second the upper right</td>
                </tr>
            </tbody>
        </table>
        <h2><a name="Last"></a>Last</h2>
        <p>Returns the last in an ordered set.</p>
        <h2><a name="max"></a>max</h2>
        <table border="1" class="docutils">
            <colgroup>
                <col width="61%" />
                <col width="39%" />
            </colgroup>
            <thead valign="bottom">
                <tr>
                    <th class="head">Input</th>
                    <th class="head">Output</th>
                </tr>
            </thead>
            <tbody valign="top">
                <tr>
                    <td>(double, double)</td>
                    <td>double</td>
                </tr>
                <tr>
                    <td>(long, long)</td>
                    <td>long</td>
                </tr>
                <tr>
                    <td>(integer, integer)</td>
                    <td>integer</td>
                </tr>
                <tr>
                    <td>(short, short)</td>
                    <td>integer</td>
                </tr>
                <tr>
                    <td>(byte, byte)</td>
                    <td>integer</td>
                </tr>
            </tbody>
        </table>
        <p>So for Data:</p>
        <div class="system-message">
            <p><tt class="docutils literal">{a: 1, b: 2}, {a: 3, b: 1}, {a: 2, b: 4}</tt>
            </p>
        </div>
        <p>Realtime query</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
from ...
    select max(a, b) as r:
</pre>
        </div>
        <p>would return</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
{r: 2}, {r: 3}, {r: 4}
</pre>
        </div>
        <p>Historical query</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
from historical ...
    select max(a, b) as r:
</pre>
        </div>
        <p>would return</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
    {r: 2}, {r: 3}, {r: 4}

from /streams/demo/infrastructure/cpu
select host, max(user, kernel) as max, (user + kernel) * 100 as f
</pre>
        </div>
        <h2><a name="Max"></a>Max</h2>
        <table border="1" class="docutils">
            <colgroup>
                <col width="50%" />
                <col width="50%" />
            </colgroup>
            <thead valign="bottom">
                <tr>
                    <th class="head">Input</th>
                    <th class="head">Output</th>
                </tr>
            </thead>
            <tbody valign="top">
                <tr>
                    <td>(byte)</td>
                    <td>byte</td>
                </tr>
                <tr>
                    <td>(short)</td>
                    <td>short</td>
                </tr>
                <tr>
                    <td>(integer)</td>
                    <td>integer</td>
                </tr>
                <tr>
                    <td>(double)</td>
                    <td>double</td>
                </tr>
                <tr>
                    <td>(long)</td>
                    <td>long</td>
                </tr>
                <tr>
                    <td>(datetime)</td>
                    <td>datetime</td>
                </tr>
            </tbody>
        </table>
        <p>So for example with the data:</p>
        <div class="system-message">
            <p><tt class="docutils literal">{a: 1, b: 2}, {a: 3, b: 1}, {a: 2, b: 4}</tt>
            </p>
        </div>
        <p>Realtime query</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
from ...
    select max(a) as r
</pre>
        </div>
        <p>would return</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
{r: 1}, {r: 3}, {r: 3}
</pre>
        </div>
        <p>and a historical query</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
from historical ...
select max(b) as r
</pre>
        </div>
        <p>would return</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
{r: 4}
</pre>
        </div>
        <h2><a name="min"></a>min</h2>
        <table border="1" class="docutils">
            <colgroup>
                <col width="61%" />
                <col width="39%" />
            </colgroup>
            <thead valign="bottom">
                <tr>
                    <th class="head">Input</th>
                    <th class="head">Output</th>
                </tr>
            </thead>
            <tbody valign="top">
                <tr>
                    <td>(double, double)</td>
                    <td>double</td>
                </tr>
                <tr>
                    <td>(long, long)</td>
                    <td>long</td>
                </tr>
                <tr>
                    <td>(integer, integer)</td>
                    <td>integer</td>
                </tr>
                <tr>
                    <td>(short, short)</td>
                    <td>integer</td>
                </tr>
                <tr>
                    <td>(byte, byte)</td>
                    <td>integer</td>
                </tr>
            </tbody>
        </table>
        <p>So for Data:</p>
        <div class="system-message">
            <p><tt class="docutils literal">{a: 1, b: 2}, {a: 3, b: 1}, {a: 2, b: 4}</tt>
            </p>
        </div>
        <p>Realtime query</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
from ...
    select min(a, b) as r:
</pre>
        </div>
        <p>would return</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
{r: 1}, {r: 1}, {r: 2}
</pre>
        </div>
        <p>Historical query</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
from historical ...
    select min(a, b) as r:
</pre>
        </div>
        <p>would return</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
{r: 1}, {r: 1}, {r: 2}
</pre>
        </div>
        <h2><a name="Min"></a>Min</h2>
        <table border="1" class="docutils">
            <colgroup>
                <col width="50%" />
                <col width="50%" />
            </colgroup>
            <thead valign="bottom">
                <tr>
                    <th class="head">Input</th>
                    <th class="head">Output</th>
                </tr>
            </thead>
            <tbody valign="top">
                <tr>
                    <td>(byte)</td>
                    <td>byte</td>
                </tr>
                <tr>
                    <td>(short)</td>
                    <td>short</td>
                </tr>
                <tr>
                    <td>(integer)</td>
                    <td>integer</td>
                </tr>
                <tr>
                    <td>(double)</td>
                    <td>double</td>
                </tr>
                <tr>
                    <td>(long)</td>
                    <td>long</td>
                </tr>
                <tr>
                    <td>(datetime)</td>
                    <td>datetime</td>
                </tr>
            </tbody>
        </table>
        <h3>Example</h3>
        <div class="line">So for example with the data:</div>
        <div class="system-message">
            <div class="line-block">
                <div class="line"><tt class="docutils literal">{a: 1, b: 2}, {a: 3, b: 1}, {a: 2, b: 4}</tt>
                </div>
            </div>
        </div>
        <p>Realtime query</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
from ...
    select min(a) as r
</pre>
        </div>
        <p>would return</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
{r: 1}, {r: 1}, {r: 1}
</pre>
        </div>
        <p>and a historical query</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
from historical ...
select min(b) as r
</pre>
        </div>
        <p>would return</p>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
{r: 1}
</pre>
        </div>
        <h2><a name="prefix"></a>prefix</h2>
        <p>True if the string is prefixed by the specified character sequence.
Format: <tt class="docutils literal">prefix(string: String, sequence: String)</tt></p>
        <h3>Example:</h3>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
from historical /streams/demo/system/probes
where prefix(os.name, "win") || prefix(os.name, "ma")
</pre>
        </div>
        <h2><a name="sum"></a>sum</h2>
        <p>Sum of the values</p>
        <h3>Example:</h3>
        <div class="system-message"><pre class="literal-block" xml:space="preserve">
from /streams/demo/infrastructure/cpu
select sum(user) as totalU emit every value
</pre>
        </div>
    </body>
</html>